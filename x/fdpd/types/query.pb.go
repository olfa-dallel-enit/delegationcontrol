// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fdpd/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetLocalDomainRequest struct {
}

func (m *QueryGetLocalDomainRequest) Reset()         { *m = QueryGetLocalDomainRequest{} }
func (m *QueryGetLocalDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLocalDomainRequest) ProtoMessage()    {}
func (*QueryGetLocalDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{2}
}
func (m *QueryGetLocalDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLocalDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLocalDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLocalDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLocalDomainRequest.Merge(m, src)
}
func (m *QueryGetLocalDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLocalDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLocalDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLocalDomainRequest proto.InternalMessageInfo

type QueryGetLocalDomainResponse struct {
	LocalDomain LocalDomain `protobuf:"bytes,1,opt,name=LocalDomain,proto3" json:"LocalDomain"`
}

func (m *QueryGetLocalDomainResponse) Reset()         { *m = QueryGetLocalDomainResponse{} }
func (m *QueryGetLocalDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLocalDomainResponse) ProtoMessage()    {}
func (*QueryGetLocalDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{3}
}
func (m *QueryGetLocalDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLocalDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLocalDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLocalDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLocalDomainResponse.Merge(m, src)
}
func (m *QueryGetLocalDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLocalDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLocalDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLocalDomainResponse proto.InternalMessageInfo

func (m *QueryGetLocalDomainResponse) GetLocalDomain() LocalDomain {
	if m != nil {
		return m.LocalDomain
	}
	return LocalDomain{}
}

type QueryGetDomainRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDomainRequest) Reset()         { *m = QueryGetDomainRequest{} }
func (m *QueryGetDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainRequest) ProtoMessage()    {}
func (*QueryGetDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{4}
}
func (m *QueryGetDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainRequest.Merge(m, src)
}
func (m *QueryGetDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainRequest proto.InternalMessageInfo

func (m *QueryGetDomainRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDomainResponse struct {
	Domain Domain `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain"`
}

func (m *QueryGetDomainResponse) Reset()         { *m = QueryGetDomainResponse{} }
func (m *QueryGetDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainResponse) ProtoMessage()    {}
func (*QueryGetDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{5}
}
func (m *QueryGetDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainResponse.Merge(m, src)
}
func (m *QueryGetDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainResponse proto.InternalMessageInfo

func (m *QueryGetDomainResponse) GetDomain() Domain {
	if m != nil {
		return m.Domain
	}
	return Domain{}
}

type QueryAllDomainRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainRequest) Reset()         { *m = QueryAllDomainRequest{} }
func (m *QueryAllDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainRequest) ProtoMessage()    {}
func (*QueryAllDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{6}
}
func (m *QueryAllDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainRequest.Merge(m, src)
}
func (m *QueryAllDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainRequest proto.InternalMessageInfo

func (m *QueryAllDomainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDomainResponse struct {
	Domain     []Domain            `protobuf:"bytes,1,rep,name=Domain,proto3" json:"Domain"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainResponse) Reset()         { *m = QueryAllDomainResponse{} }
func (m *QueryAllDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainResponse) ProtoMessage()    {}
func (*QueryAllDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{7}
}
func (m *QueryAllDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainResponse.Merge(m, src)
}
func (m *QueryAllDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainResponse proto.InternalMessageInfo

func (m *QueryAllDomainResponse) GetDomain() []Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *QueryAllDomainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetForwardPolicyRequest struct {
}

func (m *QueryGetForwardPolicyRequest) Reset()         { *m = QueryGetForwardPolicyRequest{} }
func (m *QueryGetForwardPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetForwardPolicyRequest) ProtoMessage()    {}
func (*QueryGetForwardPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{8}
}
func (m *QueryGetForwardPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetForwardPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetForwardPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetForwardPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetForwardPolicyRequest.Merge(m, src)
}
func (m *QueryGetForwardPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetForwardPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetForwardPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetForwardPolicyRequest proto.InternalMessageInfo

type QueryGetForwardPolicyResponse struct {
	ForwardPolicy ForwardPolicy `protobuf:"bytes,1,opt,name=ForwardPolicy,proto3" json:"ForwardPolicy"`
}

func (m *QueryGetForwardPolicyResponse) Reset()         { *m = QueryGetForwardPolicyResponse{} }
func (m *QueryGetForwardPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetForwardPolicyResponse) ProtoMessage()    {}
func (*QueryGetForwardPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{9}
}
func (m *QueryGetForwardPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetForwardPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetForwardPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetForwardPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetForwardPolicyResponse.Merge(m, src)
}
func (m *QueryGetForwardPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetForwardPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetForwardPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetForwardPolicyResponse proto.InternalMessageInfo

func (m *QueryGetForwardPolicyResponse) GetForwardPolicy() ForwardPolicy {
	if m != nil {
		return m.ForwardPolicy
	}
	return ForwardPolicy{}
}

type QueryGetValidityRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetValidityRequest) Reset()         { *m = QueryGetValidityRequest{} }
func (m *QueryGetValidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidityRequest) ProtoMessage()    {}
func (*QueryGetValidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{10}
}
func (m *QueryGetValidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidityRequest.Merge(m, src)
}
func (m *QueryGetValidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidityRequest proto.InternalMessageInfo

func (m *QueryGetValidityRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetValidityResponse struct {
	Validity Validity `protobuf:"bytes,1,opt,name=Validity,proto3" json:"Validity"`
}

func (m *QueryGetValidityResponse) Reset()         { *m = QueryGetValidityResponse{} }
func (m *QueryGetValidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidityResponse) ProtoMessage()    {}
func (*QueryGetValidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{11}
}
func (m *QueryGetValidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidityResponse.Merge(m, src)
}
func (m *QueryGetValidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidityResponse proto.InternalMessageInfo

func (m *QueryGetValidityResponse) GetValidity() Validity {
	if m != nil {
		return m.Validity
	}
	return Validity{}
}

type QueryAllValidityRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidityRequest) Reset()         { *m = QueryAllValidityRequest{} }
func (m *QueryAllValidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidityRequest) ProtoMessage()    {}
func (*QueryAllValidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{12}
}
func (m *QueryAllValidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidityRequest.Merge(m, src)
}
func (m *QueryAllValidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidityRequest proto.InternalMessageInfo

func (m *QueryAllValidityRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidityResponse struct {
	Validity   []Validity          `protobuf:"bytes,1,rep,name=Validity,proto3" json:"Validity"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidityResponse) Reset()         { *m = QueryAllValidityResponse{} }
func (m *QueryAllValidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidityResponse) ProtoMessage()    {}
func (*QueryAllValidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{13}
}
func (m *QueryAllValidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidityResponse.Merge(m, src)
}
func (m *QueryAllValidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidityResponse proto.InternalMessageInfo

func (m *QueryAllValidityResponse) GetValidity() []Validity {
	if m != nil {
		return m.Validity
	}
	return nil
}

func (m *QueryAllValidityResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDecisionPolicyRequest struct {
}

func (m *QueryGetDecisionPolicyRequest) Reset()         { *m = QueryGetDecisionPolicyRequest{} }
func (m *QueryGetDecisionPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDecisionPolicyRequest) ProtoMessage()    {}
func (*QueryGetDecisionPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{14}
}
func (m *QueryGetDecisionPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDecisionPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDecisionPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDecisionPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDecisionPolicyRequest.Merge(m, src)
}
func (m *QueryGetDecisionPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDecisionPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDecisionPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDecisionPolicyRequest proto.InternalMessageInfo

type QueryGetDecisionPolicyResponse struct {
	DecisionPolicy DecisionPolicy `protobuf:"bytes,1,opt,name=DecisionPolicy,proto3" json:"DecisionPolicy"`
}

func (m *QueryGetDecisionPolicyResponse) Reset()         { *m = QueryGetDecisionPolicyResponse{} }
func (m *QueryGetDecisionPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDecisionPolicyResponse) ProtoMessage()    {}
func (*QueryGetDecisionPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{15}
}
func (m *QueryGetDecisionPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDecisionPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDecisionPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDecisionPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDecisionPolicyResponse.Merge(m, src)
}
func (m *QueryGetDecisionPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDecisionPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDecisionPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDecisionPolicyResponse proto.InternalMessageInfo

func (m *QueryGetDecisionPolicyResponse) GetDecisionPolicy() DecisionPolicy {
	if m != nil {
		return m.DecisionPolicy
	}
	return DecisionPolicy{}
}

type QueryGetPermissionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPermissionRequest) Reset()         { *m = QueryGetPermissionRequest{} }
func (m *QueryGetPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPermissionRequest) ProtoMessage()    {}
func (*QueryGetPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{16}
}
func (m *QueryGetPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPermissionRequest.Merge(m, src)
}
func (m *QueryGetPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPermissionRequest proto.InternalMessageInfo

func (m *QueryGetPermissionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPermissionResponse struct {
	Permission Permission `protobuf:"bytes,1,opt,name=Permission,proto3" json:"Permission"`
}

func (m *QueryGetPermissionResponse) Reset()         { *m = QueryGetPermissionResponse{} }
func (m *QueryGetPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPermissionResponse) ProtoMessage()    {}
func (*QueryGetPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{17}
}
func (m *QueryGetPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPermissionResponse.Merge(m, src)
}
func (m *QueryGetPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPermissionResponse proto.InternalMessageInfo

func (m *QueryGetPermissionResponse) GetPermission() Permission {
	if m != nil {
		return m.Permission
	}
	return Permission{}
}

type QueryAllPermissionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPermissionRequest) Reset()         { *m = QueryAllPermissionRequest{} }
func (m *QueryAllPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPermissionRequest) ProtoMessage()    {}
func (*QueryAllPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{18}
}
func (m *QueryAllPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPermissionRequest.Merge(m, src)
}
func (m *QueryAllPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPermissionRequest proto.InternalMessageInfo

func (m *QueryAllPermissionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPermissionResponse struct {
	Permission []Permission        `protobuf:"bytes,1,rep,name=Permission,proto3" json:"Permission"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPermissionResponse) Reset()         { *m = QueryAllPermissionResponse{} }
func (m *QueryAllPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPermissionResponse) ProtoMessage()    {}
func (*QueryAllPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{19}
}
func (m *QueryAllPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPermissionResponse.Merge(m, src)
}
func (m *QueryAllPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPermissionResponse proto.InternalMessageInfo

func (m *QueryAllPermissionResponse) GetPermission() []Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

func (m *QueryAllPermissionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDelegationConditionsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDelegationConditionsRequest) Reset()         { *m = QueryGetDelegationConditionsRequest{} }
func (m *QueryGetDelegationConditionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationConditionsRequest) ProtoMessage()    {}
func (*QueryGetDelegationConditionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{20}
}
func (m *QueryGetDelegationConditionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationConditionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationConditionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationConditionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationConditionsRequest.Merge(m, src)
}
func (m *QueryGetDelegationConditionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationConditionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationConditionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationConditionsRequest proto.InternalMessageInfo

func (m *QueryGetDelegationConditionsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDelegationConditionsResponse struct {
	DelegationConditions DelegationConditions `protobuf:"bytes,1,opt,name=DelegationConditions,proto3" json:"DelegationConditions"`
}

func (m *QueryGetDelegationConditionsResponse) Reset()         { *m = QueryGetDelegationConditionsResponse{} }
func (m *QueryGetDelegationConditionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationConditionsResponse) ProtoMessage()    {}
func (*QueryGetDelegationConditionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{21}
}
func (m *QueryGetDelegationConditionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationConditionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationConditionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationConditionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationConditionsResponse.Merge(m, src)
}
func (m *QueryGetDelegationConditionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationConditionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationConditionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationConditionsResponse proto.InternalMessageInfo

func (m *QueryGetDelegationConditionsResponse) GetDelegationConditions() DelegationConditions {
	if m != nil {
		return m.DelegationConditions
	}
	return DelegationConditions{}
}

type QueryAllDelegationConditionsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationConditionsRequest) Reset()         { *m = QueryAllDelegationConditionsRequest{} }
func (m *QueryAllDelegationConditionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationConditionsRequest) ProtoMessage()    {}
func (*QueryAllDelegationConditionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{22}
}
func (m *QueryAllDelegationConditionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationConditionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationConditionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationConditionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationConditionsRequest.Merge(m, src)
}
func (m *QueryAllDelegationConditionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationConditionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationConditionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationConditionsRequest proto.InternalMessageInfo

func (m *QueryAllDelegationConditionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDelegationConditionsResponse struct {
	DelegationConditions []DelegationConditions `protobuf:"bytes,1,rep,name=DelegationConditions,proto3" json:"DelegationConditions"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationConditionsResponse) Reset()         { *m = QueryAllDelegationConditionsResponse{} }
func (m *QueryAllDelegationConditionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationConditionsResponse) ProtoMessage()    {}
func (*QueryAllDelegationConditionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{23}
}
func (m *QueryAllDelegationConditionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationConditionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationConditionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationConditionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationConditionsResponse.Merge(m, src)
}
func (m *QueryAllDelegationConditionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationConditionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationConditionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationConditionsResponse proto.InternalMessageInfo

func (m *QueryAllDelegationConditionsResponse) GetDelegationConditions() []DelegationConditions {
	if m != nil {
		return m.DelegationConditions
	}
	return nil
}

func (m *QueryAllDelegationConditionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDelegationDecisionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDelegationDecisionRequest) Reset()         { *m = QueryGetDelegationDecisionRequest{} }
func (m *QueryGetDelegationDecisionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationDecisionRequest) ProtoMessage()    {}
func (*QueryGetDelegationDecisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{24}
}
func (m *QueryGetDelegationDecisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationDecisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationDecisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationDecisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationDecisionRequest.Merge(m, src)
}
func (m *QueryGetDelegationDecisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationDecisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationDecisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationDecisionRequest proto.InternalMessageInfo

func (m *QueryGetDelegationDecisionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDelegationDecisionResponse struct {
	DelegationDecision DelegationDecision `protobuf:"bytes,1,opt,name=DelegationDecision,proto3" json:"DelegationDecision"`
}

func (m *QueryGetDelegationDecisionResponse) Reset()         { *m = QueryGetDelegationDecisionResponse{} }
func (m *QueryGetDelegationDecisionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationDecisionResponse) ProtoMessage()    {}
func (*QueryGetDelegationDecisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{25}
}
func (m *QueryGetDelegationDecisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationDecisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationDecisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationDecisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationDecisionResponse.Merge(m, src)
}
func (m *QueryGetDelegationDecisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationDecisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationDecisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationDecisionResponse proto.InternalMessageInfo

func (m *QueryGetDelegationDecisionResponse) GetDelegationDecision() DelegationDecision {
	if m != nil {
		return m.DelegationDecision
	}
	return DelegationDecision{}
}

type QueryAllDelegationDecisionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationDecisionRequest) Reset()         { *m = QueryAllDelegationDecisionRequest{} }
func (m *QueryAllDelegationDecisionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationDecisionRequest) ProtoMessage()    {}
func (*QueryAllDelegationDecisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{26}
}
func (m *QueryAllDelegationDecisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationDecisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationDecisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationDecisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationDecisionRequest.Merge(m, src)
}
func (m *QueryAllDelegationDecisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationDecisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationDecisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationDecisionRequest proto.InternalMessageInfo

func (m *QueryAllDelegationDecisionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDelegationDecisionResponse struct {
	DelegationDecision []DelegationDecision `protobuf:"bytes,1,rep,name=DelegationDecision,proto3" json:"DelegationDecision"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationDecisionResponse) Reset()         { *m = QueryAllDelegationDecisionResponse{} }
func (m *QueryAllDelegationDecisionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationDecisionResponse) ProtoMessage()    {}
func (*QueryAllDelegationDecisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{27}
}
func (m *QueryAllDelegationDecisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationDecisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationDecisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationDecisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationDecisionResponse.Merge(m, src)
}
func (m *QueryAllDelegationDecisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationDecisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationDecisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationDecisionResponse proto.InternalMessageInfo

func (m *QueryAllDelegationDecisionResponse) GetDelegationDecision() []DelegationDecision {
	if m != nil {
		return m.DelegationDecision
	}
	return nil
}

func (m *QueryAllDelegationDecisionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSelectionPolicyRequest struct {
}

func (m *QueryGetSelectionPolicyRequest) Reset()         { *m = QueryGetSelectionPolicyRequest{} }
func (m *QueryGetSelectionPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSelectionPolicyRequest) ProtoMessage()    {}
func (*QueryGetSelectionPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{28}
}
func (m *QueryGetSelectionPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSelectionPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSelectionPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSelectionPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSelectionPolicyRequest.Merge(m, src)
}
func (m *QueryGetSelectionPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSelectionPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSelectionPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSelectionPolicyRequest proto.InternalMessageInfo

type QueryGetSelectionPolicyResponse struct {
	SelectionPolicy SelectionPolicy `protobuf:"bytes,1,opt,name=SelectionPolicy,proto3" json:"SelectionPolicy"`
}

func (m *QueryGetSelectionPolicyResponse) Reset()         { *m = QueryGetSelectionPolicyResponse{} }
func (m *QueryGetSelectionPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSelectionPolicyResponse) ProtoMessage()    {}
func (*QueryGetSelectionPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{29}
}
func (m *QueryGetSelectionPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSelectionPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSelectionPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSelectionPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSelectionPolicyResponse.Merge(m, src)
}
func (m *QueryGetSelectionPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSelectionPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSelectionPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSelectionPolicyResponse proto.InternalMessageInfo

func (m *QueryGetSelectionPolicyResponse) GetSelectionPolicy() SelectionPolicy {
	if m != nil {
		return m.SelectionPolicy
	}
	return SelectionPolicy{}
}

type QueryGetSelectionCriteriaRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSelectionCriteriaRequest) Reset()         { *m = QueryGetSelectionCriteriaRequest{} }
func (m *QueryGetSelectionCriteriaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSelectionCriteriaRequest) ProtoMessage()    {}
func (*QueryGetSelectionCriteriaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{30}
}
func (m *QueryGetSelectionCriteriaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSelectionCriteriaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSelectionCriteriaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSelectionCriteriaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSelectionCriteriaRequest.Merge(m, src)
}
func (m *QueryGetSelectionCriteriaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSelectionCriteriaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSelectionCriteriaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSelectionCriteriaRequest proto.InternalMessageInfo

func (m *QueryGetSelectionCriteriaRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSelectionCriteriaResponse struct {
	SelectionCriteria SelectionCriteria `protobuf:"bytes,1,opt,name=SelectionCriteria,proto3" json:"SelectionCriteria"`
}

func (m *QueryGetSelectionCriteriaResponse) Reset()         { *m = QueryGetSelectionCriteriaResponse{} }
func (m *QueryGetSelectionCriteriaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSelectionCriteriaResponse) ProtoMessage()    {}
func (*QueryGetSelectionCriteriaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{31}
}
func (m *QueryGetSelectionCriteriaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSelectionCriteriaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSelectionCriteriaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSelectionCriteriaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSelectionCriteriaResponse.Merge(m, src)
}
func (m *QueryGetSelectionCriteriaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSelectionCriteriaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSelectionCriteriaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSelectionCriteriaResponse proto.InternalMessageInfo

func (m *QueryGetSelectionCriteriaResponse) GetSelectionCriteria() SelectionCriteria {
	if m != nil {
		return m.SelectionCriteria
	}
	return SelectionCriteria{}
}

type QueryAllSelectionCriteriaRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSelectionCriteriaRequest) Reset()         { *m = QueryAllSelectionCriteriaRequest{} }
func (m *QueryAllSelectionCriteriaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSelectionCriteriaRequest) ProtoMessage()    {}
func (*QueryAllSelectionCriteriaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{32}
}
func (m *QueryAllSelectionCriteriaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSelectionCriteriaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSelectionCriteriaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSelectionCriteriaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSelectionCriteriaRequest.Merge(m, src)
}
func (m *QueryAllSelectionCriteriaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSelectionCriteriaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSelectionCriteriaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSelectionCriteriaRequest proto.InternalMessageInfo

func (m *QueryAllSelectionCriteriaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSelectionCriteriaResponse struct {
	SelectionCriteria []SelectionCriteria `protobuf:"bytes,1,rep,name=SelectionCriteria,proto3" json:"SelectionCriteria"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSelectionCriteriaResponse) Reset()         { *m = QueryAllSelectionCriteriaResponse{} }
func (m *QueryAllSelectionCriteriaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSelectionCriteriaResponse) ProtoMessage()    {}
func (*QueryAllSelectionCriteriaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{33}
}
func (m *QueryAllSelectionCriteriaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSelectionCriteriaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSelectionCriteriaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSelectionCriteriaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSelectionCriteriaResponse.Merge(m, src)
}
func (m *QueryAllSelectionCriteriaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSelectionCriteriaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSelectionCriteriaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSelectionCriteriaResponse proto.InternalMessageInfo

func (m *QueryAllSelectionCriteriaResponse) GetSelectionCriteria() []SelectionCriteria {
	if m != nil {
		return m.SelectionCriteria
	}
	return nil
}

func (m *QueryAllSelectionCriteriaResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDelegationRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDelegationRequestRequest) Reset()         { *m = QueryGetDelegationRequestRequest{} }
func (m *QueryGetDelegationRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationRequestRequest) ProtoMessage()    {}
func (*QueryGetDelegationRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{34}
}
func (m *QueryGetDelegationRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationRequestRequest.Merge(m, src)
}
func (m *QueryGetDelegationRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationRequestRequest proto.InternalMessageInfo

func (m *QueryGetDelegationRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDelegationRequestResponse struct {
	DelegationRequest DelegationRequest `protobuf:"bytes,1,opt,name=DelegationRequest,proto3" json:"DelegationRequest"`
}

func (m *QueryGetDelegationRequestResponse) Reset()         { *m = QueryGetDelegationRequestResponse{} }
func (m *QueryGetDelegationRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationRequestResponse) ProtoMessage()    {}
func (*QueryGetDelegationRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{35}
}
func (m *QueryGetDelegationRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationRequestResponse.Merge(m, src)
}
func (m *QueryGetDelegationRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationRequestResponse proto.InternalMessageInfo

func (m *QueryGetDelegationRequestResponse) GetDelegationRequest() DelegationRequest {
	if m != nil {
		return m.DelegationRequest
	}
	return DelegationRequest{}
}

type QueryAllDelegationRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationRequestRequest) Reset()         { *m = QueryAllDelegationRequestRequest{} }
func (m *QueryAllDelegationRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationRequestRequest) ProtoMessage()    {}
func (*QueryAllDelegationRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{36}
}
func (m *QueryAllDelegationRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationRequestRequest.Merge(m, src)
}
func (m *QueryAllDelegationRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationRequestRequest proto.InternalMessageInfo

func (m *QueryAllDelegationRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDelegationRequestResponse struct {
	DelegationRequest []DelegationRequest `protobuf:"bytes,1,rep,name=DelegationRequest,proto3" json:"DelegationRequest"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationRequestResponse) Reset()         { *m = QueryAllDelegationRequestResponse{} }
func (m *QueryAllDelegationRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationRequestResponse) ProtoMessage()    {}
func (*QueryAllDelegationRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{37}
}
func (m *QueryAllDelegationRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationRequestResponse.Merge(m, src)
}
func (m *QueryAllDelegationRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationRequestResponse proto.InternalMessageInfo

func (m *QueryAllDelegationRequestResponse) GetDelegationRequest() []DelegationRequest {
	if m != nil {
		return m.DelegationRequest
	}
	return nil
}

func (m *QueryAllDelegationRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFinalDelegationDecisionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFinalDelegationDecisionRequest) Reset() {
	*m = QueryGetFinalDelegationDecisionRequest{}
}
func (m *QueryGetFinalDelegationDecisionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFinalDelegationDecisionRequest) ProtoMessage()    {}
func (*QueryGetFinalDelegationDecisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{38}
}
func (m *QueryGetFinalDelegationDecisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFinalDelegationDecisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFinalDelegationDecisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFinalDelegationDecisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFinalDelegationDecisionRequest.Merge(m, src)
}
func (m *QueryGetFinalDelegationDecisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFinalDelegationDecisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFinalDelegationDecisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFinalDelegationDecisionRequest proto.InternalMessageInfo

func (m *QueryGetFinalDelegationDecisionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFinalDelegationDecisionResponse struct {
	FinalDelegationDecision FinalDelegationDecision `protobuf:"bytes,1,opt,name=FinalDelegationDecision,proto3" json:"FinalDelegationDecision"`
}

func (m *QueryGetFinalDelegationDecisionResponse) Reset() {
	*m = QueryGetFinalDelegationDecisionResponse{}
}
func (m *QueryGetFinalDelegationDecisionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFinalDelegationDecisionResponse) ProtoMessage()    {}
func (*QueryGetFinalDelegationDecisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{39}
}
func (m *QueryGetFinalDelegationDecisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFinalDelegationDecisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFinalDelegationDecisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFinalDelegationDecisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFinalDelegationDecisionResponse.Merge(m, src)
}
func (m *QueryGetFinalDelegationDecisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFinalDelegationDecisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFinalDelegationDecisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFinalDelegationDecisionResponse proto.InternalMessageInfo

func (m *QueryGetFinalDelegationDecisionResponse) GetFinalDelegationDecision() FinalDelegationDecision {
	if m != nil {
		return m.FinalDelegationDecision
	}
	return FinalDelegationDecision{}
}

type QueryAllFinalDelegationDecisionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFinalDelegationDecisionRequest) Reset() {
	*m = QueryAllFinalDelegationDecisionRequest{}
}
func (m *QueryAllFinalDelegationDecisionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFinalDelegationDecisionRequest) ProtoMessage()    {}
func (*QueryAllFinalDelegationDecisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{40}
}
func (m *QueryAllFinalDelegationDecisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFinalDelegationDecisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFinalDelegationDecisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFinalDelegationDecisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFinalDelegationDecisionRequest.Merge(m, src)
}
func (m *QueryAllFinalDelegationDecisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFinalDelegationDecisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFinalDelegationDecisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFinalDelegationDecisionRequest proto.InternalMessageInfo

func (m *QueryAllFinalDelegationDecisionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFinalDelegationDecisionResponse struct {
	FinalDelegationDecision []FinalDelegationDecision `protobuf:"bytes,1,rep,name=FinalDelegationDecision,proto3" json:"FinalDelegationDecision"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFinalDelegationDecisionResponse) Reset() {
	*m = QueryAllFinalDelegationDecisionResponse{}
}
func (m *QueryAllFinalDelegationDecisionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFinalDelegationDecisionResponse) ProtoMessage()    {}
func (*QueryAllFinalDelegationDecisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{41}
}
func (m *QueryAllFinalDelegationDecisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFinalDelegationDecisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFinalDelegationDecisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFinalDelegationDecisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFinalDelegationDecisionResponse.Merge(m, src)
}
func (m *QueryAllFinalDelegationDecisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFinalDelegationDecisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFinalDelegationDecisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFinalDelegationDecisionResponse proto.InternalMessageInfo

func (m *QueryAllFinalDelegationDecisionResponse) GetFinalDelegationDecision() []FinalDelegationDecision {
	if m != nil {
		return m.FinalDelegationDecision
	}
	return nil
}

func (m *QueryAllFinalDelegationDecisionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDelegationRequestLogRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDelegationRequestLogRequest) Reset()         { *m = QueryGetDelegationRequestLogRequest{} }
func (m *QueryGetDelegationRequestLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationRequestLogRequest) ProtoMessage()    {}
func (*QueryGetDelegationRequestLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{42}
}
func (m *QueryGetDelegationRequestLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationRequestLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationRequestLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationRequestLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationRequestLogRequest.Merge(m, src)
}
func (m *QueryGetDelegationRequestLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationRequestLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationRequestLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationRequestLogRequest proto.InternalMessageInfo

func (m *QueryGetDelegationRequestLogRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDelegationRequestLogResponse struct {
	DelegationRequestLog DelegationRequestLog `protobuf:"bytes,1,opt,name=DelegationRequestLog,proto3" json:"DelegationRequestLog"`
}

func (m *QueryGetDelegationRequestLogResponse) Reset()         { *m = QueryGetDelegationRequestLogResponse{} }
func (m *QueryGetDelegationRequestLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationRequestLogResponse) ProtoMessage()    {}
func (*QueryGetDelegationRequestLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{43}
}
func (m *QueryGetDelegationRequestLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationRequestLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationRequestLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationRequestLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationRequestLogResponse.Merge(m, src)
}
func (m *QueryGetDelegationRequestLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationRequestLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationRequestLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationRequestLogResponse proto.InternalMessageInfo

func (m *QueryGetDelegationRequestLogResponse) GetDelegationRequestLog() DelegationRequestLog {
	if m != nil {
		return m.DelegationRequestLog
	}
	return DelegationRequestLog{}
}

type QueryAllDelegationRequestLogRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationRequestLogRequest) Reset()         { *m = QueryAllDelegationRequestLogRequest{} }
func (m *QueryAllDelegationRequestLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationRequestLogRequest) ProtoMessage()    {}
func (*QueryAllDelegationRequestLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{44}
}
func (m *QueryAllDelegationRequestLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationRequestLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationRequestLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationRequestLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationRequestLogRequest.Merge(m, src)
}
func (m *QueryAllDelegationRequestLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationRequestLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationRequestLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationRequestLogRequest proto.InternalMessageInfo

func (m *QueryAllDelegationRequestLogRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDelegationRequestLogResponse struct {
	DelegationRequestLog []DelegationRequestLog `protobuf:"bytes,1,rep,name=DelegationRequestLog,proto3" json:"DelegationRequestLog"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationRequestLogResponse) Reset()         { *m = QueryAllDelegationRequestLogResponse{} }
func (m *QueryAllDelegationRequestLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationRequestLogResponse) ProtoMessage()    {}
func (*QueryAllDelegationRequestLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{45}
}
func (m *QueryAllDelegationRequestLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationRequestLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationRequestLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationRequestLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationRequestLogResponse.Merge(m, src)
}
func (m *QueryAllDelegationRequestLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationRequestLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationRequestLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationRequestLogResponse proto.InternalMessageInfo

func (m *QueryAllDelegationRequestLogResponse) GetDelegationRequestLog() []DelegationRequestLog {
	if m != nil {
		return m.DelegationRequestLog
	}
	return nil
}

func (m *QueryAllDelegationRequestLogResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCalculationTimeRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCalculationTimeRequest) Reset()         { *m = QueryGetCalculationTimeRequest{} }
func (m *QueryGetCalculationTimeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCalculationTimeRequest) ProtoMessage()    {}
func (*QueryGetCalculationTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{46}
}
func (m *QueryGetCalculationTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCalculationTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCalculationTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCalculationTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCalculationTimeRequest.Merge(m, src)
}
func (m *QueryGetCalculationTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCalculationTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCalculationTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCalculationTimeRequest proto.InternalMessageInfo

func (m *QueryGetCalculationTimeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCalculationTimeResponse struct {
	CalculationTime CalculationTime `protobuf:"bytes,1,opt,name=CalculationTime,proto3" json:"CalculationTime"`
}

func (m *QueryGetCalculationTimeResponse) Reset()         { *m = QueryGetCalculationTimeResponse{} }
func (m *QueryGetCalculationTimeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCalculationTimeResponse) ProtoMessage()    {}
func (*QueryGetCalculationTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{47}
}
func (m *QueryGetCalculationTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCalculationTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCalculationTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCalculationTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCalculationTimeResponse.Merge(m, src)
}
func (m *QueryGetCalculationTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCalculationTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCalculationTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCalculationTimeResponse proto.InternalMessageInfo

func (m *QueryGetCalculationTimeResponse) GetCalculationTime() CalculationTime {
	if m != nil {
		return m.CalculationTime
	}
	return CalculationTime{}
}

type QueryAllCalculationTimeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCalculationTimeRequest) Reset()         { *m = QueryAllCalculationTimeRequest{} }
func (m *QueryAllCalculationTimeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCalculationTimeRequest) ProtoMessage()    {}
func (*QueryAllCalculationTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{48}
}
func (m *QueryAllCalculationTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCalculationTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCalculationTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCalculationTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCalculationTimeRequest.Merge(m, src)
}
func (m *QueryAllCalculationTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCalculationTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCalculationTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCalculationTimeRequest proto.InternalMessageInfo

func (m *QueryAllCalculationTimeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCalculationTimeResponse struct {
	CalculationTime []CalculationTime   `protobuf:"bytes,1,rep,name=CalculationTime,proto3" json:"CalculationTime"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCalculationTimeResponse) Reset()         { *m = QueryAllCalculationTimeResponse{} }
func (m *QueryAllCalculationTimeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCalculationTimeResponse) ProtoMessage()    {}
func (*QueryAllCalculationTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83ffac346ad997f, []int{49}
}
func (m *QueryAllCalculationTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCalculationTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCalculationTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCalculationTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCalculationTimeResponse.Merge(m, src)
}
func (m *QueryAllCalculationTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCalculationTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCalculationTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCalculationTimeResponse proto.InternalMessageInfo

func (m *QueryAllCalculationTimeResponse) GetCalculationTime() []CalculationTime {
	if m != nil {
		return m.CalculationTime
	}
	return nil
}

func (m *QueryAllCalculationTimeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "delegationcontrol.fdpd.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "delegationcontrol.fdpd.QueryParamsResponse")
	proto.RegisterType((*QueryGetLocalDomainRequest)(nil), "delegationcontrol.fdpd.QueryGetLocalDomainRequest")
	proto.RegisterType((*QueryGetLocalDomainResponse)(nil), "delegationcontrol.fdpd.QueryGetLocalDomainResponse")
	proto.RegisterType((*QueryGetDomainRequest)(nil), "delegationcontrol.fdpd.QueryGetDomainRequest")
	proto.RegisterType((*QueryGetDomainResponse)(nil), "delegationcontrol.fdpd.QueryGetDomainResponse")
	proto.RegisterType((*QueryAllDomainRequest)(nil), "delegationcontrol.fdpd.QueryAllDomainRequest")
	proto.RegisterType((*QueryAllDomainResponse)(nil), "delegationcontrol.fdpd.QueryAllDomainResponse")
	proto.RegisterType((*QueryGetForwardPolicyRequest)(nil), "delegationcontrol.fdpd.QueryGetForwardPolicyRequest")
	proto.RegisterType((*QueryGetForwardPolicyResponse)(nil), "delegationcontrol.fdpd.QueryGetForwardPolicyResponse")
	proto.RegisterType((*QueryGetValidityRequest)(nil), "delegationcontrol.fdpd.QueryGetValidityRequest")
	proto.RegisterType((*QueryGetValidityResponse)(nil), "delegationcontrol.fdpd.QueryGetValidityResponse")
	proto.RegisterType((*QueryAllValidityRequest)(nil), "delegationcontrol.fdpd.QueryAllValidityRequest")
	proto.RegisterType((*QueryAllValidityResponse)(nil), "delegationcontrol.fdpd.QueryAllValidityResponse")
	proto.RegisterType((*QueryGetDecisionPolicyRequest)(nil), "delegationcontrol.fdpd.QueryGetDecisionPolicyRequest")
	proto.RegisterType((*QueryGetDecisionPolicyResponse)(nil), "delegationcontrol.fdpd.QueryGetDecisionPolicyResponse")
	proto.RegisterType((*QueryGetPermissionRequest)(nil), "delegationcontrol.fdpd.QueryGetPermissionRequest")
	proto.RegisterType((*QueryGetPermissionResponse)(nil), "delegationcontrol.fdpd.QueryGetPermissionResponse")
	proto.RegisterType((*QueryAllPermissionRequest)(nil), "delegationcontrol.fdpd.QueryAllPermissionRequest")
	proto.RegisterType((*QueryAllPermissionResponse)(nil), "delegationcontrol.fdpd.QueryAllPermissionResponse")
	proto.RegisterType((*QueryGetDelegationConditionsRequest)(nil), "delegationcontrol.fdpd.QueryGetDelegationConditionsRequest")
	proto.RegisterType((*QueryGetDelegationConditionsResponse)(nil), "delegationcontrol.fdpd.QueryGetDelegationConditionsResponse")
	proto.RegisterType((*QueryAllDelegationConditionsRequest)(nil), "delegationcontrol.fdpd.QueryAllDelegationConditionsRequest")
	proto.RegisterType((*QueryAllDelegationConditionsResponse)(nil), "delegationcontrol.fdpd.QueryAllDelegationConditionsResponse")
	proto.RegisterType((*QueryGetDelegationDecisionRequest)(nil), "delegationcontrol.fdpd.QueryGetDelegationDecisionRequest")
	proto.RegisterType((*QueryGetDelegationDecisionResponse)(nil), "delegationcontrol.fdpd.QueryGetDelegationDecisionResponse")
	proto.RegisterType((*QueryAllDelegationDecisionRequest)(nil), "delegationcontrol.fdpd.QueryAllDelegationDecisionRequest")
	proto.RegisterType((*QueryAllDelegationDecisionResponse)(nil), "delegationcontrol.fdpd.QueryAllDelegationDecisionResponse")
	proto.RegisterType((*QueryGetSelectionPolicyRequest)(nil), "delegationcontrol.fdpd.QueryGetSelectionPolicyRequest")
	proto.RegisterType((*QueryGetSelectionPolicyResponse)(nil), "delegationcontrol.fdpd.QueryGetSelectionPolicyResponse")
	proto.RegisterType((*QueryGetSelectionCriteriaRequest)(nil), "delegationcontrol.fdpd.QueryGetSelectionCriteriaRequest")
	proto.RegisterType((*QueryGetSelectionCriteriaResponse)(nil), "delegationcontrol.fdpd.QueryGetSelectionCriteriaResponse")
	proto.RegisterType((*QueryAllSelectionCriteriaRequest)(nil), "delegationcontrol.fdpd.QueryAllSelectionCriteriaRequest")
	proto.RegisterType((*QueryAllSelectionCriteriaResponse)(nil), "delegationcontrol.fdpd.QueryAllSelectionCriteriaResponse")
	proto.RegisterType((*QueryGetDelegationRequestRequest)(nil), "delegationcontrol.fdpd.QueryGetDelegationRequestRequest")
	proto.RegisterType((*QueryGetDelegationRequestResponse)(nil), "delegationcontrol.fdpd.QueryGetDelegationRequestResponse")
	proto.RegisterType((*QueryAllDelegationRequestRequest)(nil), "delegationcontrol.fdpd.QueryAllDelegationRequestRequest")
	proto.RegisterType((*QueryAllDelegationRequestResponse)(nil), "delegationcontrol.fdpd.QueryAllDelegationRequestResponse")
	proto.RegisterType((*QueryGetFinalDelegationDecisionRequest)(nil), "delegationcontrol.fdpd.QueryGetFinalDelegationDecisionRequest")
	proto.RegisterType((*QueryGetFinalDelegationDecisionResponse)(nil), "delegationcontrol.fdpd.QueryGetFinalDelegationDecisionResponse")
	proto.RegisterType((*QueryAllFinalDelegationDecisionRequest)(nil), "delegationcontrol.fdpd.QueryAllFinalDelegationDecisionRequest")
	proto.RegisterType((*QueryAllFinalDelegationDecisionResponse)(nil), "delegationcontrol.fdpd.QueryAllFinalDelegationDecisionResponse")
	proto.RegisterType((*QueryGetDelegationRequestLogRequest)(nil), "delegationcontrol.fdpd.QueryGetDelegationRequestLogRequest")
	proto.RegisterType((*QueryGetDelegationRequestLogResponse)(nil), "delegationcontrol.fdpd.QueryGetDelegationRequestLogResponse")
	proto.RegisterType((*QueryAllDelegationRequestLogRequest)(nil), "delegationcontrol.fdpd.QueryAllDelegationRequestLogRequest")
	proto.RegisterType((*QueryAllDelegationRequestLogResponse)(nil), "delegationcontrol.fdpd.QueryAllDelegationRequestLogResponse")
	proto.RegisterType((*QueryGetCalculationTimeRequest)(nil), "delegationcontrol.fdpd.QueryGetCalculationTimeRequest")
	proto.RegisterType((*QueryGetCalculationTimeResponse)(nil), "delegationcontrol.fdpd.QueryGetCalculationTimeResponse")
	proto.RegisterType((*QueryAllCalculationTimeRequest)(nil), "delegationcontrol.fdpd.QueryAllCalculationTimeRequest")
	proto.RegisterType((*QueryAllCalculationTimeResponse)(nil), "delegationcontrol.fdpd.QueryAllCalculationTimeResponse")
}

func init() { proto.RegisterFile("fdpd/query.proto", fileDescriptor_c83ffac346ad997f) }

var fileDescriptor_c83ffac346ad997f = []byte{
	// 1819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xdf, 0x6f, 0x14, 0xd5,
	0x17, 0xef, 0xed, 0xf2, 0x25, 0x5f, 0x2f, 0x01, 0xe5, 0x52, 0x28, 0x0c, 0xb0, 0x94, 0x4b, 0x69,
	0x4b, 0x4b, 0x77, 0xda, 0x2d, 0x2d, 0x2d, 0x10, 0xcc, 0x02, 0x01, 0x13, 0x79, 0x28, 0x85, 0x60,
	0x62, 0xa2, 0x75, 0xd8, 0x9d, 0xae, 0x83, 0xb3, 0x3b, 0xcb, 0xee, 0x82, 0xa2, 0xf1, 0x85, 0x07,
	0x13, 0x1f, 0x34, 0x46, 0x7d, 0x22, 0x26, 0x26, 0xc6, 0xc4, 0x17, 0x13, 0x7d, 0x30, 0x31, 0x3e,
	0x19, 0x43, 0x4c, 0x48, 0xf0, 0x07, 0x89, 0x0f, 0x12, 0x1f, 0x8c, 0xa1, 0xfe, 0x21, 0x66, 0xee,
	0x9c, 0xdb, 0x99, 0x3b, 0x77, 0xee, 0xde, 0x99, 0x65, 0x78, 0xdb, 0xcc, 0x3d, 0x3f, 0x3e, 0x9f,
	0x73, 0xce, 0x9d, 0xb9, 0xfb, 0x99, 0xc1, 0xcf, 0xad, 0xd5, 0x5a, 0x35, 0xf3, 0xc6, 0x4d, 0xbb,
	0x7d, 0xbb, 0xd4, 0x6a, 0x7b, 0x5d, 0x8f, 0xec, 0xaa, 0xd9, 0xae, 0x5d, 0xb7, 0xba, 0x8e, 0xd7,
	0xac, 0x7a, 0xcd, 0x6e, 0xdb, 0x73, 0x4b, 0xbe, 0x8d, 0x31, 0x54, 0xf7, 0xea, 0x1e, 0x33, 0x31,
	0xfd, 0x5f, 0x81, 0xb5, 0xb1, 0xaf, 0xee, 0x79, 0x75, 0xd7, 0x36, 0xad, 0x96, 0x63, 0x5a, 0xcd,
	0xa6, 0xd7, 0x65, 0x8e, 0x1d, 0x58, 0x9d, 0xac, 0x7a, 0x9d, 0x86, 0xd7, 0x31, 0xaf, 0x59, 0x1d,
	0x3b, 0x48, 0x62, 0xde, 0x9a, 0xbd, 0x66, 0x77, 0xad, 0x59, 0xb3, 0x65, 0xd5, 0x9d, 0x26, 0x33,
	0x06, 0xdb, 0xed, 0x0c, 0x49, 0xcb, 0x6a, 0x5b, 0x0d, 0xee, 0x3e, 0xcc, 0x2e, 0xb9, 0x5e, 0xd5,
	0x72, 0x57, 0x6b, 0x5e, 0xc3, 0x72, 0x44, 0x5b, 0xe1, 0xd2, 0x1e, 0x76, 0x69, 0xcd, 0x6b, 0xbf,
	0x69, 0xb5, 0x6b, 0xab, 0x2d, 0xcf, 0x75, 0xaa, 0xc0, 0xc8, 0xd8, 0xc1, 0x96, 0x6e, 0x59, 0xae,
	0x53, 0x73, 0xba, 0xfc, 0xa2, 0x11, 0x84, 0xb0, 0xab, 0x4e, 0xc7, 0xf1, 0x9a, 0xa2, 0xc3, 0xce,
	0x00, 0x8a, 0xdd, 0x6e, 0x38, 0x9d, 0x4e, 0x88, 0x70, 0x04, 0x5c, 0x78, 0x79, 0x56, 0xab, 0x5e,
	0xb3, 0xe6, 0x44, 0xf9, 0x16, 0xe3, 0x16, 0x3c, 0x3e, 0xac, 0xef, 0x65, 0xeb, 0x1d, 0xdb, 0xb5,
	0xab, 0x5d, 0x29, 0xeb, 0xfe, 0xd8, 0x62, 0xb5, 0xed, 0x74, 0xed, 0xb6, 0x63, 0x09, 0xcb, 0x91,
	0xd8, 0x6d, 0xfb, 0xc6, 0x4d, 0xbb, 0xd3, 0x85, 0xe5, 0xd1, 0x80, 0xbf, 0xd3, 0xf4, 0x6b, 0xa5,
	0x04, 0x70, 0x50, 0x11, 0x64, 0xd5, 0xf5, 0xea, 0x02, 0xc6, 0xaa, 0xe5, 0x56, 0x6f, 0xba, 0x81,
	0x4d, 0xd7, 0x69, 0xd8, 0xc1, 0x22, 0x1d, 0xc2, 0xe4, 0x92, 0xdf, 0xc6, 0x65, 0xd6, 0xa6, 0x95,
	0xc0, 0x99, 0x5e, 0xc6, 0x3b, 0x84, 0xab, 0x9d, 0x96, 0xd7, 0xec, 0xd8, 0xe4, 0x14, 0xde, 0x1c,
	0xb4, 0x73, 0x37, 0x1a, 0x41, 0x13, 0x5b, 0xca, 0xc5, 0x52, 0xf2, 0x68, 0x95, 0x02, 0xbf, 0x33,
	0x9b, 0xee, 0xff, 0x7d, 0x60, 0x60, 0x05, 0x7c, 0xe8, 0x3e, 0x6c, 0xb0, 0xa0, 0x17, 0xec, 0xee,
	0x45, 0x7f, 0x02, 0xce, 0xb1, 0x6e, 0xf3, 0x94, 0xd7, 0xf1, 0xde, 0xc4, 0x55, 0x48, 0xfd, 0x22,
	0xde, 0x12, 0xb9, 0x0c, 0xf9, 0x0f, 0xa9, 0xf2, 0x47, 0x4c, 0x01, 0x44, 0xd4, 0x9b, 0x8e, 0xe3,
	0x9d, 0x3c, 0x97, 0x00, 0x82, 0x6c, 0xc3, 0x83, 0x4e, 0x8d, 0x05, 0xdf, 0xb4, 0x32, 0xe8, 0xd4,
	0xe8, 0x55, 0xbc, 0x2b, 0x6e, 0x18, 0x96, 0x42, 0x80, 0xa2, 0x2c, 0x85, 0x80, 0x02, 0x7c, 0xe8,
	0x2a, 0x00, 0xa8, 0xb8, 0x62, 0x15, 0xc8, 0x79, 0x8c, 0xc3, 0x7d, 0x04, 0xa1, 0xc7, 0x4a, 0xc1,
	0xa6, 0x2b, 0xf9, 0x9b, 0xae, 0x14, 0xec, 0x6c, 0xd8, 0x74, 0xa5, 0x65, 0xab, 0x6e, 0x83, 0xef,
	0x4a, 0xc4, 0x93, 0x7e, 0x8e, 0x00, 0x79, 0x24, 0x43, 0x02, 0xf2, 0x42, 0x56, 0xe4, 0xe4, 0x82,
	0x00, 0x70, 0x90, 0x01, 0x1c, 0xd7, 0x02, 0x0c, 0x52, 0x0b, 0x08, 0x8b, 0x78, 0x1f, 0x2f, 0xed,
	0xf9, 0x60, 0x8f, 0x2f, 0xb3, 0xbd, 0xc3, 0xe7, 0xa1, 0x8d, 0xf7, 0x2b, 0xd6, 0x81, 0xc7, 0x25,
	0xbc, 0x55, 0x58, 0x80, 0x6a, 0x1d, 0x56, 0xd1, 0x11, 0x8c, 0x81, 0x95, 0x18, 0x81, 0x1e, 0xc1,
	0xc3, 0x3c, 0xe7, 0x55, 0xb8, 0xb9, 0xa8, 0x26, 0xe3, 0x55, 0xbc, 0x5b, 0x36, 0x05, 0x64, 0x67,
	0xf0, 0xff, 0xf9, 0x35, 0x00, 0x35, 0xa2, 0x02, 0xc5, 0xed, 0x00, 0xcf, 0x86, 0x1f, 0xb5, 0x00,
	0x4a, 0xc5, 0x75, 0xe3, 0x50, 0xf2, 0x9a, 0x91, 0xaf, 0x10, 0x70, 0x10, 0x72, 0x24, 0x72, 0x28,
	0xf4, 0xc3, 0x21, 0xbf, 0x59, 0x39, 0x10, 0xce, 0xc2, 0x39, 0xb8, 0xfd, 0x89, 0xc3, 0x72, 0x0b,
	0x17, 0x55, 0x06, 0xc0, 0xe7, 0x0a, 0xde, 0x26, 0xae, 0x6c, 0x14, 0x4e, 0x35, 0xfd, 0x82, 0x35,
	0x70, 0x8b, 0xc5, 0xa0, 0x53, 0x78, 0x0f, 0xcf, 0xbb, 0xbc, 0xf1, 0x70, 0x51, 0x8d, 0xcc, 0x5a,
	0x78, 0xff, 0x8b, 0x1a, 0x03, 0xc0, 0x17, 0x30, 0x0e, 0xaf, 0x02, 0x38, 0xaa, 0xbc, 0xbf, 0x6e,
	0x58, 0x02, 0xb0, 0x88, 0x2f, 0xad, 0x02, 0xa8, 0x8a, 0xeb, 0xca, 0xa0, 0xf2, 0x1a, 0x9e, 0x6f,
	0x10, 0xb0, 0x89, 0x65, 0x51, 0xb0, 0x29, 0xf4, 0xcb, 0x26, 0xbf, 0x21, 0x9a, 0xc7, 0x87, 0xc2,
	0x19, 0xe1, 0x38, 0xce, 0x6e, 0x3c, 0xf0, 0x55, 0x5d, 0xfb, 0x10, 0xe1, 0xd1, 0xde, 0x7e, 0x40,
	0x79, 0x0d, 0x0f, 0x25, 0xad, 0x43, 0x8d, 0x8f, 0xaa, 0xe7, 0x4c, 0xf6, 0x81, 0x32, 0x24, 0xc6,
	0xa3, 0x0d, 0xe0, 0xe1, 0xdf, 0xd9, 0x7b, 0xf0, 0xc8, 0xab, 0xd1, 0x7f, 0x72, 0xfe, 0xca, 0x7c,
	0x5a, 0xfe, 0x85, 0x3c, 0xf9, 0xe7, 0x37, 0x10, 0x73, 0xf8, 0xa0, 0xdc, 0x58, 0xbe, 0xc1, 0x55,
	0xe3, 0xf0, 0x1e, 0xc2, 0xb4, 0x97, 0x17, 0x14, 0xe3, 0x35, 0x4c, 0xe4, 0x55, 0xe8, 0xc2, 0xa4,
	0xbe, 0x14, 0xdc, 0x03, 0x0a, 0x91, 0x10, 0x8b, 0xbe, 0x01, 0xe8, 0x85, 0xb6, 0xc4, 0xd1, 0xe7,
	0x35, 0x04, 0xbf, 0x73, 0xd6, 0x8a, 0x6c, 0x1a, 0xd6, 0x85, 0xbc, 0x58, 0xe7, 0xd7, 0xfc, 0x91,
	0xf0, 0x89, 0x71, 0x99, 0x1f, 0xd0, 0xc5, 0x67, 0xca, 0xdb, 0xf8, 0x80, 0xd2, 0x02, 0xf8, 0xbe,
	0x84, 0x9f, 0x8d, 0x2d, 0x41, 0x8d, 0xc7, 0x55, 0x64, 0x63, 0xe6, 0xc0, 0x34, 0x1e, 0x85, 0x96,
	0xf1, 0x88, 0x94, 0xfb, 0x2c, 0xfc, 0x7b, 0x50, 0x4d, 0xe6, 0x1d, 0x14, 0xce, 0x73, 0x82, 0x13,
	0x40, 0x7e, 0x05, 0x6f, 0x97, 0x16, 0x01, 0xf4, 0x11, 0x2d, 0x68, 0xee, 0x00, 0xb0, 0xe5, 0x48,
	0xf4, 0x3a, 0x00, 0xaf, 0xb8, 0xae, 0x12, 0x78, 0x5e, 0x43, 0xf9, 0x00, 0x85, 0x5b, 0x20, 0x33,
	0xe1, 0x42, 0x3e, 0x84, 0xf3, 0x1b, 0xc8, 0x48, 0xcb, 0xc3, 0xb9, 0xe7, 0xb4, 0x53, 0xb4, 0x3c,
	0xc1, 0x29, 0xac, 0x80, 0xb4, 0xa8, 0x6b, 0xb9, 0xe4, 0xc0, 0x2b, 0x20, 0x2d, 0x44, 0x5b, 0xae,
	0x04, 0xfe, 0x34, 0x5a, 0x9e, 0x99, 0x70, 0x21, 0x1f, 0xc2, 0xf9, 0xb5, 0x7c, 0x11, 0x8f, 0x6d,
	0xfc, 0xc5, 0xf1, 0xff, 0xe6, 0xa7, 0x7f, 0x0a, 0xdd, 0x45, 0x78, 0x5c, 0xeb, 0x0a, 0xd5, 0xf0,
	0xf0, 0xb0, 0xc2, 0x04, 0x1a, 0x61, 0x2a, 0xff, 0x31, 0x25, 0xbb, 0x41, 0x65, 0x54, 0x51, 0x69,
	0x0b, 0x68, 0x55, 0x5c, 0x57, 0x43, 0x2b, 0xaf, 0xb1, 0x58, 0xe7, 0xe5, 0xe8, 0x95, 0x32, 0x4d,
	0x39, 0x0a, 0xf9, 0x97, 0xe3, 0x29, 0x1f, 0x60, 0xa1, 0x1c, 0x17, 0xbd, 0x7a, 0xb6, 0x03, 0x6c,
	0xd4, 0x2f, 0xe9, 0x00, 0x17, 0xae, 0xa7, 0x3f, 0xc0, 0x86, 0x3e, 0xf2, 0x01, 0x2e, 0x5c, 0x4b,
	0x3e, 0xc0, 0xca, 0x3c, 0x9e, 0xee, 0x01, 0x36, 0x13, 0xff, 0x42, 0x9e, 0xfc, 0xf3, 0x1b, 0x88,
	0x99, 0xf0, 0x0c, 0x73, 0x36, 0x54, 0xf7, 0xae, 0x38, 0x0d, 0x5b, 0x35, 0x0b, 0x91, 0x33, 0x8d,
	0xe4, 0x11, 0x9e, 0x69, 0x62, 0x4b, 0xba, 0x33, 0x4d, 0xcc, 0x9c, 0x9f, 0x69, 0x62, 0x97, 0xe9,
	0xeb, 0x80, 0xb6, 0xe2, 0xba, 0x0a, 0xb4, 0x79, 0x75, 0xfc, 0x1e, 0x02, 0x9a, 0x49, 0xa9, 0x7a,
	0xd1, 0x2c, 0x3c, 0x39, 0xcd, 0xdc, 0xba, 0x5b, 0xfe, 0x60, 0x14, 0xff, 0x8f, 0xb1, 0x20, 0xef,
	0x23, 0xbc, 0x39, 0x50, 0x54, 0x89, 0xf2, 0x14, 0x2d, 0x8b, 0xb8, 0xc6, 0x54, 0x2a, 0xdb, 0x20,
	0x33, 0x1d, 0xbb, 0xf3, 0xc7, 0xbf, 0x9f, 0x0c, 0x8e, 0x90, 0xa2, 0x29, 0x39, 0x99, 0x11, 0x1d,
	0x9f, 0x7c, 0x89, 0x04, 0x21, 0x96, 0x94, 0x7b, 0x26, 0x49, 0x94, 0x7a, 0x8d, 0xb9, 0x4c, 0x3e,
	0x00, 0xf0, 0x28, 0x03, 0x38, 0x46, 0x46, 0x55, 0x00, 0xa3, 0x6f, 0x15, 0xc8, 0xa7, 0x88, 0xab,
	0x9c, 0x64, 0x5a, 0x97, 0x4d, 0x04, 0x57, 0x4a, 0x6b, 0x0e, 0xb8, 0xa6, 0x18, 0xae, 0xc3, 0xe4,
	0x90, 0x0a, 0x57, 0x80, 0xc8, 0x7c, 0xc7, 0xa9, 0xbd, 0x4b, 0x3e, 0x46, 0xf8, 0x99, 0xc0, 0xbf,
	0xe2, 0xba, 0x1a, 0x64, 0x71, 0x6d, 0x58, 0x83, 0x4c, 0x12, 0x7a, 0xf5, 0x2d, 0x85, 0x5a, 0x7d,
	0x8d, 0x62, 0x4a, 0x2a, 0x39, 0xa6, 0xab, 0x41, 0x92, 0x62, 0x6b, 0xcc, 0x67, 0xf4, 0x02, 0x98,
	0x25, 0x06, 0x73, 0x82, 0x8c, 0xa9, 0x60, 0x8a, 0xaf, 0x80, 0xc8, 0x67, 0x28, 0x94, 0x26, 0x89,
	0xa9, 0xcb, 0x19, 0x13, 0x4f, 0x8d, 0x99, 0xf4, 0x0e, 0x80, 0x6f, 0x9a, 0xe1, 0x1b, 0x27, 0x87,
	0x55, 0xf8, 0xf8, 0x7b, 0xa8, 0xa0, 0xc5, 0x77, 0x11, 0xde, 0xc2, 0x63, 0xf8, 0x4d, 0x36, 0x75,
	0x5d, 0xcb, 0x86, 0x30, 0x41, 0xab, 0xa5, 0x13, 0x0c, 0x21, 0x25, 0x23, 0x3a, 0x84, 0xe4, 0x5b,
	0x14, 0x97, 0x41, 0x89, 0xb6, 0x6b, 0x89, 0x8a, 0xab, 0xb1, 0x90, 0xd5, 0x0d, 0xb0, 0x9a, 0x0c,
	0xeb, 0x11, 0x32, 0xae, 0x1c, 0x4a, 0xf1, 0x05, 0x9e, 0x7f, 0xc3, 0x89, 0xca, 0x81, 0xb3, 0xba,
	0xbc, 0x92, 0xe4, 0x69, 0x94, 0xb3, 0xb8, 0xa4, 0x85, 0x19, 0xbe, 0x4b, 0x0c, 0xda, 0xfe, 0x05,
	0xc2, 0x5b, 0xc3, 0x38, 0x7e, 0xe3, 0x67, 0x75, 0x7d, 0xcc, 0x8a, 0x34, 0x51, 0x69, 0xa5, 0x93,
	0x0c, 0xe9, 0x28, 0xa1, 0x7a, 0xa4, 0xe4, 0x57, 0x94, 0xac, 0xd1, 0x91, 0x93, 0xfa, 0x6e, 0x2a,
	0x95, 0x46, 0xe3, 0x54, 0x7f, 0xce, 0x80, 0xff, 0x04, 0xc3, 0x7f, 0x8c, 0x94, 0xd5, 0x03, 0x91,
	0xf0, 0x7a, 0x36, 0x28, 0xfa, 0x03, 0x84, 0x87, 0x93, 0x82, 0xfb, 0xe5, 0x3f, 0xa9, 0xbd, 0x5b,
	0xf6, 0x4d, 0x49, 0xa3, 0x84, 0xd2, 0x79, 0x46, 0xc9, 0x24, 0xd3, 0x99, 0x28, 0x91, 0x9f, 0x51,
	0x92, 0x7c, 0x46, 0x96, 0xd2, 0x97, 0x37, 0xf6, 0xff, 0xca, 0x38, 0xd1, 0x8f, 0x2b, 0x90, 0x58,
	0x64, 0x24, 0xca, 0x64, 0x26, 0x05, 0x09, 0xbe, 0x67, 0x83, 0xae, 0xdc, 0x43, 0x78, 0xa7, 0x1c,
	0xd8, 0xef, 0xc9, 0x52, 0xfa, 0xb2, 0x66, 0xa3, 0xd2, 0x53, 0x96, 0xa4, 0x73, 0x8c, 0xca, 0x34,
	0x99, 0xca, 0x40, 0x85, 0x7c, 0x87, 0x24, 0x71, 0x8f, 0x68, 0x6f, 0x7a, 0xc9, 0x52, 0xa2, 0x71,
	0x3c, 0xb3, 0x1f, 0x20, 0x9f, 0x61, 0xc8, 0x27, 0xc9, 0x84, 0x0a, 0x79, 0xfc, 0xcb, 0x03, 0xf2,
	0x13, 0x4a, 0xd0, 0xbb, 0xc8, 0x62, 0x6a, 0x00, 0x31, 0xb1, 0xce, 0x58, 0xea, 0xc3, 0x13, 0xc0,
	0x1f, 0x67, 0xe0, 0x67, 0x89, 0xa9, 0x07, 0xcf, 0xbf, 0x8c, 0x08, 0x06, 0xe8, 0x47, 0x84, 0x87,
	0xa4, 0xb0, 0xfe, 0xfc, 0x2c, 0xea, 0x86, 0xa0, 0x4f, 0x1a, 0xbd, 0x04, 0x44, 0x5a, 0x66, 0x34,
	0x8e, 0x92, 0xc9, 0xf4, 0x34, 0x58, 0x17, 0x64, 0xe1, 0x68, 0x31, 0xfd, 0x76, 0x14, 0xf5, 0x33,
	0x63, 0xa9, 0x0f, 0xcf, 0xb4, 0x5d, 0x90, 0xbf, 0x1d, 0x09, 0xbb, 0x20, 0x85, 0x4d, 0xd5, 0x85,
	0x3e, 0x69, 0xf4, 0xd2, 0xf4, 0xf4, 0x5d, 0x90, 0x69, 0x90, 0xbf, 0x90, 0x52, 0xeb, 0x21, 0xa7,
	0xb5, 0x87, 0xd5, 0x9e, 0xd2, 0x95, 0xf1, 0x7c, 0xdf, 0xfe, 0x40, 0xe8, 0x34, 0x23, 0xb4, 0x48,
	0x16, 0x94, 0xc7, 0x5e, 0xd5, 0x97, 0x3f, 0x41, 0x7b, 0x1e, 0x21, 0x6c, 0x28, 0x72, 0xf8, 0x4d,
	0x3a, 0xad, 0x2b, 0xf5, 0x13, 0xf1, 0xd3, 0xeb, 0x6c, 0x74, 0x89, 0xf1, 0x9b, 0x23, 0xb3, 0x99,
	0xf9, 0x91, 0xdf, 0x50, 0xb2, 0x12, 0x93, 0xe5, 0x98, 0x22, 0xe9, 0x49, 0x59, 0x8e, 0x29, 0xb2,
	0x38, 0x44, 0x4f, 0x32, 0x3a, 0xf3, 0x64, 0x2e, 0xfd, 0xfc, 0xad, 0xba, 0x5e, 0x3d, 0xe8, 0xd5,
	0x2f, 0xc2, 0x39, 0x25, 0x8c, 0x9e, 0xf1, 0x9c, 0x92, 0x95, 0x93, 0x46, 0xf0, 0xa2, 0x0b, 0x8c,
	0xd3, 0x0c, 0x29, 0x65, 0xe3, 0x44, 0x7e, 0x40, 0x92, 0x78, 0xa2, 0x7f, 0x34, 0x26, 0x6b, 0x3e,
	0xfa, 0x47, 0xa3, 0x42, 0xc0, 0xd1, 0x1f, 0xb2, 0xe2, 0x1f, 0xbc, 0x05, 0xad, 0xf8, 0x1e, 0x61,
	0x12, 0x0b, 0xe9, 0x77, 0x61, 0x41, 0x57, 0xc8, 0xbe, 0xe0, 0xab, 0xf5, 0x27, 0xfd, 0x93, 0x3d,
	0x0e, 0xff, 0xcc, 0xe2, 0xfd, 0xc7, 0x45, 0xf4, 0xf0, 0x71, 0x11, 0xfd, 0xf3, 0xb8, 0x88, 0x3e,
	0x5a, 0x2f, 0x0e, 0x3c, 0x5c, 0x2f, 0x0e, 0x3c, 0x5a, 0x2f, 0x0e, 0xbc, 0x5c, 0x94, 0x43, 0xbc,
	0x15, 0x04, 0xe9, 0xde, 0x6e, 0xd9, 0x9d, 0x6b, 0x9b, 0xd9, 0xa7, 0x7e, 0x73, 0xff, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x28, 0x22, 0x34, 0x4a, 0x1b, 0x2a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a LocalDomain by index.
	LocalDomain(ctx context.Context, in *QueryGetLocalDomainRequest, opts ...grpc.CallOption) (*QueryGetLocalDomainResponse, error)
	// Queries a Domain by id.
	Domain(ctx context.Context, in *QueryGetDomainRequest, opts ...grpc.CallOption) (*QueryGetDomainResponse, error)
	// Queries a list of Domain items.
	DomainAll(ctx context.Context, in *QueryAllDomainRequest, opts ...grpc.CallOption) (*QueryAllDomainResponse, error)
	// Queries a ForwardPolicy by index.
	ForwardPolicy(ctx context.Context, in *QueryGetForwardPolicyRequest, opts ...grpc.CallOption) (*QueryGetForwardPolicyResponse, error)
	// Queries a Validity by id.
	Validity(ctx context.Context, in *QueryGetValidityRequest, opts ...grpc.CallOption) (*QueryGetValidityResponse, error)
	// Queries a list of Validity items.
	ValidityAll(ctx context.Context, in *QueryAllValidityRequest, opts ...grpc.CallOption) (*QueryAllValidityResponse, error)
	// Queries a DecisionPolicy by index.
	DecisionPolicy(ctx context.Context, in *QueryGetDecisionPolicyRequest, opts ...grpc.CallOption) (*QueryGetDecisionPolicyResponse, error)
	// Queries a Permission by id.
	Permission(ctx context.Context, in *QueryGetPermissionRequest, opts ...grpc.CallOption) (*QueryGetPermissionResponse, error)
	// Queries a list of Permission items.
	PermissionAll(ctx context.Context, in *QueryAllPermissionRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error)
	// Queries a DelegationConditions by id.
	DelegationConditions(ctx context.Context, in *QueryGetDelegationConditionsRequest, opts ...grpc.CallOption) (*QueryGetDelegationConditionsResponse, error)
	// Queries a list of DelegationConditions items.
	DelegationConditionsAll(ctx context.Context, in *QueryAllDelegationConditionsRequest, opts ...grpc.CallOption) (*QueryAllDelegationConditionsResponse, error)
	// Queries a DelegationDecision by id.
	DelegationDecision(ctx context.Context, in *QueryGetDelegationDecisionRequest, opts ...grpc.CallOption) (*QueryGetDelegationDecisionResponse, error)
	// Queries a list of DelegationDecision items.
	DelegationDecisionAll(ctx context.Context, in *QueryAllDelegationDecisionRequest, opts ...grpc.CallOption) (*QueryAllDelegationDecisionResponse, error)
	// Queries a SelectionPolicy by index.
	SelectionPolicy(ctx context.Context, in *QueryGetSelectionPolicyRequest, opts ...grpc.CallOption) (*QueryGetSelectionPolicyResponse, error)
	// Queries a SelectionCriteria by id.
	SelectionCriteria(ctx context.Context, in *QueryGetSelectionCriteriaRequest, opts ...grpc.CallOption) (*QueryGetSelectionCriteriaResponse, error)
	// Queries a list of SelectionCriteria items.
	SelectionCriteriaAll(ctx context.Context, in *QueryAllSelectionCriteriaRequest, opts ...grpc.CallOption) (*QueryAllSelectionCriteriaResponse, error)
	// Queries a DelegationRequest by id.
	DelegationRequest(ctx context.Context, in *QueryGetDelegationRequestRequest, opts ...grpc.CallOption) (*QueryGetDelegationRequestResponse, error)
	// Queries a list of DelegationRequest items.
	DelegationRequestAll(ctx context.Context, in *QueryAllDelegationRequestRequest, opts ...grpc.CallOption) (*QueryAllDelegationRequestResponse, error)
	// Queries a FinalDelegationDecision by id.
	FinalDelegationDecision(ctx context.Context, in *QueryGetFinalDelegationDecisionRequest, opts ...grpc.CallOption) (*QueryGetFinalDelegationDecisionResponse, error)
	// Queries a list of FinalDelegationDecision items.
	FinalDelegationDecisionAll(ctx context.Context, in *QueryAllFinalDelegationDecisionRequest, opts ...grpc.CallOption) (*QueryAllFinalDelegationDecisionResponse, error)
	// Queries a DelegationRequestLog by id.
	DelegationRequestLog(ctx context.Context, in *QueryGetDelegationRequestLogRequest, opts ...grpc.CallOption) (*QueryGetDelegationRequestLogResponse, error)
	// Queries a list of DelegationRequestLog items.
	DelegationRequestLogAll(ctx context.Context, in *QueryAllDelegationRequestLogRequest, opts ...grpc.CallOption) (*QueryAllDelegationRequestLogResponse, error)
	// Queries a CalculationTime by id.
	CalculationTime(ctx context.Context, in *QueryGetCalculationTimeRequest, opts ...grpc.CallOption) (*QueryGetCalculationTimeResponse, error)
	// Queries a list of CalculationTime items.
	CalculationTimeAll(ctx context.Context, in *QueryAllCalculationTimeRequest, opts ...grpc.CallOption) (*QueryAllCalculationTimeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LocalDomain(ctx context.Context, in *QueryGetLocalDomainRequest, opts ...grpc.CallOption) (*QueryGetLocalDomainResponse, error) {
	out := new(QueryGetLocalDomainResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/LocalDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Domain(ctx context.Context, in *QueryGetDomainRequest, opts ...grpc.CallOption) (*QueryGetDomainResponse, error) {
	out := new(QueryGetDomainResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/Domain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainAll(ctx context.Context, in *QueryAllDomainRequest, opts ...grpc.CallOption) (*QueryAllDomainResponse, error) {
	out := new(QueryAllDomainResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DomainAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ForwardPolicy(ctx context.Context, in *QueryGetForwardPolicyRequest, opts ...grpc.CallOption) (*QueryGetForwardPolicyResponse, error) {
	out := new(QueryGetForwardPolicyResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/ForwardPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validity(ctx context.Context, in *QueryGetValidityRequest, opts ...grpc.CallOption) (*QueryGetValidityResponse, error) {
	out := new(QueryGetValidityResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/Validity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidityAll(ctx context.Context, in *QueryAllValidityRequest, opts ...grpc.CallOption) (*QueryAllValidityResponse, error) {
	out := new(QueryAllValidityResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/ValidityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DecisionPolicy(ctx context.Context, in *QueryGetDecisionPolicyRequest, opts ...grpc.CallOption) (*QueryGetDecisionPolicyResponse, error) {
	out := new(QueryGetDecisionPolicyResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DecisionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Permission(ctx context.Context, in *QueryGetPermissionRequest, opts ...grpc.CallOption) (*QueryGetPermissionResponse, error) {
	out := new(QueryGetPermissionResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/Permission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PermissionAll(ctx context.Context, in *QueryAllPermissionRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error) {
	out := new(QueryAllPermissionResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/PermissionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationConditions(ctx context.Context, in *QueryGetDelegationConditionsRequest, opts ...grpc.CallOption) (*QueryGetDelegationConditionsResponse, error) {
	out := new(QueryGetDelegationConditionsResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DelegationConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationConditionsAll(ctx context.Context, in *QueryAllDelegationConditionsRequest, opts ...grpc.CallOption) (*QueryAllDelegationConditionsResponse, error) {
	out := new(QueryAllDelegationConditionsResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DelegationConditionsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationDecision(ctx context.Context, in *QueryGetDelegationDecisionRequest, opts ...grpc.CallOption) (*QueryGetDelegationDecisionResponse, error) {
	out := new(QueryGetDelegationDecisionResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DelegationDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationDecisionAll(ctx context.Context, in *QueryAllDelegationDecisionRequest, opts ...grpc.CallOption) (*QueryAllDelegationDecisionResponse, error) {
	out := new(QueryAllDelegationDecisionResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DelegationDecisionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SelectionPolicy(ctx context.Context, in *QueryGetSelectionPolicyRequest, opts ...grpc.CallOption) (*QueryGetSelectionPolicyResponse, error) {
	out := new(QueryGetSelectionPolicyResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/SelectionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SelectionCriteria(ctx context.Context, in *QueryGetSelectionCriteriaRequest, opts ...grpc.CallOption) (*QueryGetSelectionCriteriaResponse, error) {
	out := new(QueryGetSelectionCriteriaResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/SelectionCriteria", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SelectionCriteriaAll(ctx context.Context, in *QueryAllSelectionCriteriaRequest, opts ...grpc.CallOption) (*QueryAllSelectionCriteriaResponse, error) {
	out := new(QueryAllSelectionCriteriaResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/SelectionCriteriaAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationRequest(ctx context.Context, in *QueryGetDelegationRequestRequest, opts ...grpc.CallOption) (*QueryGetDelegationRequestResponse, error) {
	out := new(QueryGetDelegationRequestResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DelegationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationRequestAll(ctx context.Context, in *QueryAllDelegationRequestRequest, opts ...grpc.CallOption) (*QueryAllDelegationRequestResponse, error) {
	out := new(QueryAllDelegationRequestResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DelegationRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalDelegationDecision(ctx context.Context, in *QueryGetFinalDelegationDecisionRequest, opts ...grpc.CallOption) (*QueryGetFinalDelegationDecisionResponse, error) {
	out := new(QueryGetFinalDelegationDecisionResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/FinalDelegationDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalDelegationDecisionAll(ctx context.Context, in *QueryAllFinalDelegationDecisionRequest, opts ...grpc.CallOption) (*QueryAllFinalDelegationDecisionResponse, error) {
	out := new(QueryAllFinalDelegationDecisionResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/FinalDelegationDecisionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationRequestLog(ctx context.Context, in *QueryGetDelegationRequestLogRequest, opts ...grpc.CallOption) (*QueryGetDelegationRequestLogResponse, error) {
	out := new(QueryGetDelegationRequestLogResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DelegationRequestLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationRequestLogAll(ctx context.Context, in *QueryAllDelegationRequestLogRequest, opts ...grpc.CallOption) (*QueryAllDelegationRequestLogResponse, error) {
	out := new(QueryAllDelegationRequestLogResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/DelegationRequestLogAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculationTime(ctx context.Context, in *QueryGetCalculationTimeRequest, opts ...grpc.CallOption) (*QueryGetCalculationTimeResponse, error) {
	out := new(QueryGetCalculationTimeResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/CalculationTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculationTimeAll(ctx context.Context, in *QueryAllCalculationTimeRequest, opts ...grpc.CallOption) (*QueryAllCalculationTimeResponse, error) {
	out := new(QueryAllCalculationTimeResponse)
	err := c.cc.Invoke(ctx, "/delegationcontrol.fdpd.Query/CalculationTimeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a LocalDomain by index.
	LocalDomain(context.Context, *QueryGetLocalDomainRequest) (*QueryGetLocalDomainResponse, error)
	// Queries a Domain by id.
	Domain(context.Context, *QueryGetDomainRequest) (*QueryGetDomainResponse, error)
	// Queries a list of Domain items.
	DomainAll(context.Context, *QueryAllDomainRequest) (*QueryAllDomainResponse, error)
	// Queries a ForwardPolicy by index.
	ForwardPolicy(context.Context, *QueryGetForwardPolicyRequest) (*QueryGetForwardPolicyResponse, error)
	// Queries a Validity by id.
	Validity(context.Context, *QueryGetValidityRequest) (*QueryGetValidityResponse, error)
	// Queries a list of Validity items.
	ValidityAll(context.Context, *QueryAllValidityRequest) (*QueryAllValidityResponse, error)
	// Queries a DecisionPolicy by index.
	DecisionPolicy(context.Context, *QueryGetDecisionPolicyRequest) (*QueryGetDecisionPolicyResponse, error)
	// Queries a Permission by id.
	Permission(context.Context, *QueryGetPermissionRequest) (*QueryGetPermissionResponse, error)
	// Queries a list of Permission items.
	PermissionAll(context.Context, *QueryAllPermissionRequest) (*QueryAllPermissionResponse, error)
	// Queries a DelegationConditions by id.
	DelegationConditions(context.Context, *QueryGetDelegationConditionsRequest) (*QueryGetDelegationConditionsResponse, error)
	// Queries a list of DelegationConditions items.
	DelegationConditionsAll(context.Context, *QueryAllDelegationConditionsRequest) (*QueryAllDelegationConditionsResponse, error)
	// Queries a DelegationDecision by id.
	DelegationDecision(context.Context, *QueryGetDelegationDecisionRequest) (*QueryGetDelegationDecisionResponse, error)
	// Queries a list of DelegationDecision items.
	DelegationDecisionAll(context.Context, *QueryAllDelegationDecisionRequest) (*QueryAllDelegationDecisionResponse, error)
	// Queries a SelectionPolicy by index.
	SelectionPolicy(context.Context, *QueryGetSelectionPolicyRequest) (*QueryGetSelectionPolicyResponse, error)
	// Queries a SelectionCriteria by id.
	SelectionCriteria(context.Context, *QueryGetSelectionCriteriaRequest) (*QueryGetSelectionCriteriaResponse, error)
	// Queries a list of SelectionCriteria items.
	SelectionCriteriaAll(context.Context, *QueryAllSelectionCriteriaRequest) (*QueryAllSelectionCriteriaResponse, error)
	// Queries a DelegationRequest by id.
	DelegationRequest(context.Context, *QueryGetDelegationRequestRequest) (*QueryGetDelegationRequestResponse, error)
	// Queries a list of DelegationRequest items.
	DelegationRequestAll(context.Context, *QueryAllDelegationRequestRequest) (*QueryAllDelegationRequestResponse, error)
	// Queries a FinalDelegationDecision by id.
	FinalDelegationDecision(context.Context, *QueryGetFinalDelegationDecisionRequest) (*QueryGetFinalDelegationDecisionResponse, error)
	// Queries a list of FinalDelegationDecision items.
	FinalDelegationDecisionAll(context.Context, *QueryAllFinalDelegationDecisionRequest) (*QueryAllFinalDelegationDecisionResponse, error)
	// Queries a DelegationRequestLog by id.
	DelegationRequestLog(context.Context, *QueryGetDelegationRequestLogRequest) (*QueryGetDelegationRequestLogResponse, error)
	// Queries a list of DelegationRequestLog items.
	DelegationRequestLogAll(context.Context, *QueryAllDelegationRequestLogRequest) (*QueryAllDelegationRequestLogResponse, error)
	// Queries a CalculationTime by id.
	CalculationTime(context.Context, *QueryGetCalculationTimeRequest) (*QueryGetCalculationTimeResponse, error)
	// Queries a list of CalculationTime items.
	CalculationTimeAll(context.Context, *QueryAllCalculationTimeRequest) (*QueryAllCalculationTimeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LocalDomain(ctx context.Context, req *QueryGetLocalDomainRequest) (*QueryGetLocalDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalDomain not implemented")
}
func (*UnimplementedQueryServer) Domain(ctx context.Context, req *QueryGetDomainRequest) (*QueryGetDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Domain not implemented")
}
func (*UnimplementedQueryServer) DomainAll(ctx context.Context, req *QueryAllDomainRequest) (*QueryAllDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainAll not implemented")
}
func (*UnimplementedQueryServer) ForwardPolicy(ctx context.Context, req *QueryGetForwardPolicyRequest) (*QueryGetForwardPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardPolicy not implemented")
}
func (*UnimplementedQueryServer) Validity(ctx context.Context, req *QueryGetValidityRequest) (*QueryGetValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validity not implemented")
}
func (*UnimplementedQueryServer) ValidityAll(ctx context.Context, req *QueryAllValidityRequest) (*QueryAllValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidityAll not implemented")
}
func (*UnimplementedQueryServer) DecisionPolicy(ctx context.Context, req *QueryGetDecisionPolicyRequest) (*QueryGetDecisionPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecisionPolicy not implemented")
}
func (*UnimplementedQueryServer) Permission(ctx context.Context, req *QueryGetPermissionRequest) (*QueryGetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Permission not implemented")
}
func (*UnimplementedQueryServer) PermissionAll(ctx context.Context, req *QueryAllPermissionRequest) (*QueryAllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionAll not implemented")
}
func (*UnimplementedQueryServer) DelegationConditions(ctx context.Context, req *QueryGetDelegationConditionsRequest) (*QueryGetDelegationConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationConditions not implemented")
}
func (*UnimplementedQueryServer) DelegationConditionsAll(ctx context.Context, req *QueryAllDelegationConditionsRequest) (*QueryAllDelegationConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationConditionsAll not implemented")
}
func (*UnimplementedQueryServer) DelegationDecision(ctx context.Context, req *QueryGetDelegationDecisionRequest) (*QueryGetDelegationDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationDecision not implemented")
}
func (*UnimplementedQueryServer) DelegationDecisionAll(ctx context.Context, req *QueryAllDelegationDecisionRequest) (*QueryAllDelegationDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationDecisionAll not implemented")
}
func (*UnimplementedQueryServer) SelectionPolicy(ctx context.Context, req *QueryGetSelectionPolicyRequest) (*QueryGetSelectionPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectionPolicy not implemented")
}
func (*UnimplementedQueryServer) SelectionCriteria(ctx context.Context, req *QueryGetSelectionCriteriaRequest) (*QueryGetSelectionCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectionCriteria not implemented")
}
func (*UnimplementedQueryServer) SelectionCriteriaAll(ctx context.Context, req *QueryAllSelectionCriteriaRequest) (*QueryAllSelectionCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectionCriteriaAll not implemented")
}
func (*UnimplementedQueryServer) DelegationRequest(ctx context.Context, req *QueryGetDelegationRequestRequest) (*QueryGetDelegationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationRequest not implemented")
}
func (*UnimplementedQueryServer) DelegationRequestAll(ctx context.Context, req *QueryAllDelegationRequestRequest) (*QueryAllDelegationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationRequestAll not implemented")
}
func (*UnimplementedQueryServer) FinalDelegationDecision(ctx context.Context, req *QueryGetFinalDelegationDecisionRequest) (*QueryGetFinalDelegationDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalDelegationDecision not implemented")
}
func (*UnimplementedQueryServer) FinalDelegationDecisionAll(ctx context.Context, req *QueryAllFinalDelegationDecisionRequest) (*QueryAllFinalDelegationDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalDelegationDecisionAll not implemented")
}
func (*UnimplementedQueryServer) DelegationRequestLog(ctx context.Context, req *QueryGetDelegationRequestLogRequest) (*QueryGetDelegationRequestLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationRequestLog not implemented")
}
func (*UnimplementedQueryServer) DelegationRequestLogAll(ctx context.Context, req *QueryAllDelegationRequestLogRequest) (*QueryAllDelegationRequestLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationRequestLogAll not implemented")
}
func (*UnimplementedQueryServer) CalculationTime(ctx context.Context, req *QueryGetCalculationTimeRequest) (*QueryGetCalculationTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculationTime not implemented")
}
func (*UnimplementedQueryServer) CalculationTimeAll(ctx context.Context, req *QueryAllCalculationTimeRequest) (*QueryAllCalculationTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculationTimeAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LocalDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLocalDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LocalDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/LocalDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LocalDomain(ctx, req.(*QueryGetLocalDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Domain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Domain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/Domain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Domain(ctx, req.(*QueryGetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DomainAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainAll(ctx, req.(*QueryAllDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ForwardPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetForwardPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ForwardPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/ForwardPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ForwardPolicy(ctx, req.(*QueryGetForwardPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/Validity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validity(ctx, req.(*QueryGetValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/ValidityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidityAll(ctx, req.(*QueryAllValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DecisionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDecisionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DecisionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DecisionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DecisionPolicy(ctx, req.(*QueryGetDecisionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Permission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Permission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/Permission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Permission(ctx, req.(*QueryGetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PermissionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/PermissionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionAll(ctx, req.(*QueryAllPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDelegationConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DelegationConditions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationConditions(ctx, req.(*QueryGetDelegationConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationConditionsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDelegationConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationConditionsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DelegationConditionsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationConditionsAll(ctx, req.(*QueryAllDelegationConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDelegationDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DelegationDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationDecision(ctx, req.(*QueryGetDelegationDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationDecisionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDelegationDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationDecisionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DelegationDecisionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationDecisionAll(ctx, req.(*QueryAllDelegationDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SelectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSelectionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SelectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/SelectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SelectionPolicy(ctx, req.(*QueryGetSelectionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SelectionCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSelectionCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SelectionCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/SelectionCriteria",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SelectionCriteria(ctx, req.(*QueryGetSelectionCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SelectionCriteriaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSelectionCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SelectionCriteriaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/SelectionCriteriaAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SelectionCriteriaAll(ctx, req.(*QueryAllSelectionCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDelegationRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DelegationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationRequest(ctx, req.(*QueryGetDelegationRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDelegationRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DelegationRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationRequestAll(ctx, req.(*QueryAllDelegationRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalDelegationDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFinalDelegationDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalDelegationDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/FinalDelegationDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalDelegationDecision(ctx, req.(*QueryGetFinalDelegationDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalDelegationDecisionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFinalDelegationDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalDelegationDecisionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/FinalDelegationDecisionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalDelegationDecisionAll(ctx, req.(*QueryAllFinalDelegationDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationRequestLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDelegationRequestLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationRequestLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DelegationRequestLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationRequestLog(ctx, req.(*QueryGetDelegationRequestLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationRequestLogAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDelegationRequestLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationRequestLogAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/DelegationRequestLogAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationRequestLogAll(ctx, req.(*QueryAllDelegationRequestLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculationTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCalculationTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculationTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/CalculationTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculationTime(ctx, req.(*QueryGetCalculationTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculationTimeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCalculationTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculationTimeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delegationcontrol.fdpd.Query/CalculationTimeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculationTimeAll(ctx, req.(*QueryAllCalculationTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "delegationcontrol.fdpd.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LocalDomain",
			Handler:    _Query_LocalDomain_Handler,
		},
		{
			MethodName: "Domain",
			Handler:    _Query_Domain_Handler,
		},
		{
			MethodName: "DomainAll",
			Handler:    _Query_DomainAll_Handler,
		},
		{
			MethodName: "ForwardPolicy",
			Handler:    _Query_ForwardPolicy_Handler,
		},
		{
			MethodName: "Validity",
			Handler:    _Query_Validity_Handler,
		},
		{
			MethodName: "ValidityAll",
			Handler:    _Query_ValidityAll_Handler,
		},
		{
			MethodName: "DecisionPolicy",
			Handler:    _Query_DecisionPolicy_Handler,
		},
		{
			MethodName: "Permission",
			Handler:    _Query_Permission_Handler,
		},
		{
			MethodName: "PermissionAll",
			Handler:    _Query_PermissionAll_Handler,
		},
		{
			MethodName: "DelegationConditions",
			Handler:    _Query_DelegationConditions_Handler,
		},
		{
			MethodName: "DelegationConditionsAll",
			Handler:    _Query_DelegationConditionsAll_Handler,
		},
		{
			MethodName: "DelegationDecision",
			Handler:    _Query_DelegationDecision_Handler,
		},
		{
			MethodName: "DelegationDecisionAll",
			Handler:    _Query_DelegationDecisionAll_Handler,
		},
		{
			MethodName: "SelectionPolicy",
			Handler:    _Query_SelectionPolicy_Handler,
		},
		{
			MethodName: "SelectionCriteria",
			Handler:    _Query_SelectionCriteria_Handler,
		},
		{
			MethodName: "SelectionCriteriaAll",
			Handler:    _Query_SelectionCriteriaAll_Handler,
		},
		{
			MethodName: "DelegationRequest",
			Handler:    _Query_DelegationRequest_Handler,
		},
		{
			MethodName: "DelegationRequestAll",
			Handler:    _Query_DelegationRequestAll_Handler,
		},
		{
			MethodName: "FinalDelegationDecision",
			Handler:    _Query_FinalDelegationDecision_Handler,
		},
		{
			MethodName: "FinalDelegationDecisionAll",
			Handler:    _Query_FinalDelegationDecisionAll_Handler,
		},
		{
			MethodName: "DelegationRequestLog",
			Handler:    _Query_DelegationRequestLog_Handler,
		},
		{
			MethodName: "DelegationRequestLogAll",
			Handler:    _Query_DelegationRequestLogAll_Handler,
		},
		{
			MethodName: "CalculationTime",
			Handler:    _Query_CalculationTime_Handler,
		},
		{
			MethodName: "CalculationTimeAll",
			Handler:    _Query_CalculationTimeAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fdpd/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLocalDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLocalDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLocalDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetLocalDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLocalDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLocalDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LocalDomain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		for iNdEx := len(m.Domain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetForwardPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetForwardPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetForwardPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetForwardPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetForwardPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetForwardPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ForwardPolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetValidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Validity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validity) > 0 {
		for iNdEx := len(m.Validity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDecisionPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDecisionPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDecisionPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetDecisionPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDecisionPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDecisionPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DecisionPolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Permission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Permission) > 0 {
		for iNdEx := len(m.Permission) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Permission[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationConditionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationConditionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationConditionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationConditionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationConditionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationConditionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DelegationConditions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationConditionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationConditionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationConditionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationConditionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationConditionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationConditionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegationConditions) > 0 {
		for iNdEx := len(m.DelegationConditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationConditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationDecisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationDecisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationDecisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationDecisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationDecisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationDecisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DelegationDecision.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationDecisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationDecisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationDecisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationDecisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationDecisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationDecisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegationDecision) > 0 {
		for iNdEx := len(m.DelegationDecision) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationDecision[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSelectionPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSelectionPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSelectionPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSelectionPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSelectionPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSelectionPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SelectionPolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSelectionCriteriaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSelectionCriteriaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSelectionCriteriaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSelectionCriteriaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSelectionCriteriaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSelectionCriteriaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SelectionCriteria.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSelectionCriteriaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSelectionCriteriaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSelectionCriteriaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSelectionCriteriaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSelectionCriteriaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSelectionCriteriaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SelectionCriteria) > 0 {
		for iNdEx := len(m.SelectionCriteria) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelectionCriteria[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DelegationRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegationRequest) > 0 {
		for iNdEx := len(m.DelegationRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFinalDelegationDecisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFinalDelegationDecisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFinalDelegationDecisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFinalDelegationDecisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFinalDelegationDecisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFinalDelegationDecisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FinalDelegationDecision.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFinalDelegationDecisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFinalDelegationDecisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFinalDelegationDecisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFinalDelegationDecisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFinalDelegationDecisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFinalDelegationDecisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FinalDelegationDecision) > 0 {
		for iNdEx := len(m.FinalDelegationDecision) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalDelegationDecision[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationRequestLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationRequestLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationRequestLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationRequestLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationRequestLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationRequestLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DelegationRequestLog.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationRequestLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationRequestLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationRequestLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationRequestLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationRequestLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationRequestLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegationRequestLog) > 0 {
		for iNdEx := len(m.DelegationRequestLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationRequestLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCalculationTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCalculationTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCalculationTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCalculationTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCalculationTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCalculationTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CalculationTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCalculationTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCalculationTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCalculationTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCalculationTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCalculationTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCalculationTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CalculationTime) > 0 {
		for iNdEx := len(m.CalculationTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CalculationTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLocalDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetLocalDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LocalDomain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domain) > 0 {
		for _, e := range m.Domain {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetForwardPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetForwardPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ForwardPolicy.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetValidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetValidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validity.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validity) > 0 {
		for _, e := range m.Validity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDecisionPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetDecisionPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DecisionPolicy.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Permission.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Permission) > 0 {
		for _, e := range m.Permission {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDelegationConditionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDelegationConditionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DelegationConditions.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDelegationConditionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDelegationConditionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationConditions) > 0 {
		for _, e := range m.DelegationConditions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDelegationDecisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDelegationDecisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DelegationDecision.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDelegationDecisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDelegationDecisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationDecision) > 0 {
		for _, e := range m.DelegationDecision {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSelectionPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSelectionPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SelectionPolicy.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSelectionCriteriaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSelectionCriteriaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SelectionCriteria.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSelectionCriteriaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSelectionCriteriaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SelectionCriteria) > 0 {
		for _, e := range m.SelectionCriteria {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDelegationRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDelegationRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DelegationRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDelegationRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDelegationRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationRequest) > 0 {
		for _, e := range m.DelegationRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFinalDelegationDecisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFinalDelegationDecisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FinalDelegationDecision.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFinalDelegationDecisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFinalDelegationDecisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FinalDelegationDecision) > 0 {
		for _, e := range m.FinalDelegationDecision {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDelegationRequestLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDelegationRequestLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DelegationRequestLog.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDelegationRequestLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDelegationRequestLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationRequestLog) > 0 {
		for _, e := range m.DelegationRequestLog {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCalculationTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCalculationTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CalculationTime.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCalculationTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCalculationTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CalculationTime) > 0 {
		for _, e := range m.CalculationTime {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLocalDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLocalDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLocalDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLocalDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLocalDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLocalDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalDomain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = append(m.Domain, Domain{})
			if err := m.Domain[len(m.Domain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetForwardPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetForwardPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetForwardPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetForwardPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetForwardPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetForwardPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ForwardPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validity = append(m.Validity, Validity{})
			if err := m.Validity[len(m.Validity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDecisionPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDecisionPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDecisionPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDecisionPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDecisionPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDecisionPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DecisionPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Permission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = append(m.Permission, Permission{})
			if err := m.Permission[len(m.Permission)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationConditionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationConditionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationConditionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationConditionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationConditionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationConditionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationConditionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationConditionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationConditionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationConditionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationConditionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationConditionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationConditions = append(m.DelegationConditions, DelegationConditions{})
			if err := m.DelegationConditions[len(m.DelegationConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationDecisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationDecisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationDecisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationDecisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationDecisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationDecisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationDecision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationDecision.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationDecisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationDecisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationDecisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationDecisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationDecisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationDecisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationDecision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationDecision = append(m.DelegationDecision, DelegationDecision{})
			if err := m.DelegationDecision[len(m.DelegationDecision)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSelectionPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSelectionPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSelectionPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSelectionPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSelectionPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSelectionPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SelectionPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSelectionCriteriaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSelectionCriteriaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSelectionCriteriaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSelectionCriteriaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSelectionCriteriaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSelectionCriteriaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionCriteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SelectionCriteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSelectionCriteriaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSelectionCriteriaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSelectionCriteriaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSelectionCriteriaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSelectionCriteriaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSelectionCriteriaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionCriteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectionCriteria = append(m.SelectionCriteria, SelectionCriteria{})
			if err := m.SelectionCriteria[len(m.SelectionCriteria)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationRequest = append(m.DelegationRequest, DelegationRequest{})
			if err := m.DelegationRequest[len(m.DelegationRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFinalDelegationDecisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFinalDelegationDecisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFinalDelegationDecisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFinalDelegationDecisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFinalDelegationDecisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFinalDelegationDecisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalDelegationDecision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalDelegationDecision.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFinalDelegationDecisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFinalDelegationDecisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFinalDelegationDecisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFinalDelegationDecisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFinalDelegationDecisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFinalDelegationDecisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalDelegationDecision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalDelegationDecision = append(m.FinalDelegationDecision, FinalDelegationDecision{})
			if err := m.FinalDelegationDecision[len(m.FinalDelegationDecision)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationRequestLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationRequestLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationRequestLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationRequestLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationRequestLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationRequestLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRequestLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationRequestLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationRequestLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationRequestLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationRequestLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationRequestLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationRequestLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationRequestLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRequestLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationRequestLog = append(m.DelegationRequestLog, DelegationRequestLog{})
			if err := m.DelegationRequestLog[len(m.DelegationRequestLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCalculationTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCalculationTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCalculationTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCalculationTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCalculationTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCalculationTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CalculationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCalculationTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCalculationTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCalculationTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCalculationTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCalculationTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCalculationTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalculationTime = append(m.CalculationTime, CalculationTime{})
			if err := m.CalculationTime[len(m.CalculationTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
