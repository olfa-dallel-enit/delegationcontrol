// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fdpd/selection_criteria.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SelectionCriteria struct {
	Id                    uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainList            []string  `protobuf:"bytes,2,rep,name=domainList,proto3" json:"domainList,omitempty"`
	DelegatorLocationList []string  `protobuf:"bytes,3,rep,name=delegatorLocationList,proto3" json:"delegatorLocationList,omitempty"`
	Cost                  uint64    `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	NbDelegations         uint64    `protobuf:"varint,5,opt,name=nbDelegations,proto3" json:"nbDelegations,omitempty"`
	Validity              *Validity `protobuf:"bytes,6,opt,name=validity,proto3" json:"validity,omitempty"`
	Creator               string    `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *SelectionCriteria) Reset()         { *m = SelectionCriteria{} }
func (m *SelectionCriteria) String() string { return proto.CompactTextString(m) }
func (*SelectionCriteria) ProtoMessage()    {}
func (*SelectionCriteria) Descriptor() ([]byte, []int) {
	return fileDescriptor_4edf6d73a31dea54, []int{0}
}
func (m *SelectionCriteria) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectionCriteria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectionCriteria.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectionCriteria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectionCriteria.Merge(m, src)
}
func (m *SelectionCriteria) XXX_Size() int {
	return m.Size()
}
func (m *SelectionCriteria) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectionCriteria.DiscardUnknown(m)
}

var xxx_messageInfo_SelectionCriteria proto.InternalMessageInfo

func (m *SelectionCriteria) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SelectionCriteria) GetDomainList() []string {
	if m != nil {
		return m.DomainList
	}
	return nil
}

func (m *SelectionCriteria) GetDelegatorLocationList() []string {
	if m != nil {
		return m.DelegatorLocationList
	}
	return nil
}

func (m *SelectionCriteria) GetCost() uint64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *SelectionCriteria) GetNbDelegations() uint64 {
	if m != nil {
		return m.NbDelegations
	}
	return 0
}

func (m *SelectionCriteria) GetValidity() *Validity {
	if m != nil {
		return m.Validity
	}
	return nil
}

func (m *SelectionCriteria) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*SelectionCriteria)(nil), "delegationcontrol.fdpd.SelectionCriteria")
}

func init() { proto.RegisterFile("fdpd/selection_criteria.proto", fileDescriptor_4edf6d73a31dea54) }

var fileDescriptor_4edf6d73a31dea54 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x3f, 0x4b, 0xc4, 0x30,
	0x14, 0x6f, 0x7a, 0xf5, 0xce, 0x7b, 0xa2, 0x60, 0x44, 0x09, 0x82, 0xa1, 0x88, 0x43, 0xa7, 0x16,
	0xd4, 0xc1, 0xc1, 0x49, 0x1d, 0x6f, 0xaa, 0xe0, 0xe0, 0x22, 0xbd, 0x24, 0x4a, 0xa0, 0x36, 0x25,
	0x09, 0xe2, 0x7d, 0x06, 0x17, 0x3f, 0x96, 0xe3, 0x8d, 0x8e, 0xd2, 0x7e, 0x11, 0xe9, 0xb3, 0x3d,
	0x14, 0x6f, 0x4b, 0xde, 0xef, 0xdf, 0xfb, 0x3d, 0x38, 0x7a, 0x94, 0xb5, 0xcc, 0x9c, 0x2a, 0x95,
	0xf0, 0xda, 0x54, 0x0f, 0xc2, 0x6a, 0xaf, 0xac, 0x2e, 0xd2, 0xda, 0x1a, 0x6f, 0xe8, 0x81, 0x54,
	0xa5, 0x7a, 0x2a, 0x3a, 0x48, 0x98, 0xca, 0x5b, 0x53, 0xa6, 0x9d, 0xe0, 0x70, 0x0f, 0x65, 0x2f,
	0x45, 0xa9, 0xa5, 0xf6, 0x8b, 0x1f, 0xf2, 0xf1, 0x5b, 0x08, 0xbb, 0xb7, 0x83, 0xd3, 0x75, 0x6f,
	0x44, 0x77, 0x20, 0xd4, 0x92, 0x91, 0x98, 0x24, 0x51, 0x1e, 0x6a, 0x49, 0x39, 0x80, 0x34, 0xcf,
	0x85, 0xae, 0x66, 0xda, 0x79, 0x16, 0xc6, 0xa3, 0x64, 0x9a, 0xff, 0x9a, 0xd0, 0x73, 0xd8, 0xef,
	0x43, 0x8d, 0x9d, 0x19, 0x81, 0xd9, 0x48, 0x1d, 0x21, 0x75, 0x3d, 0x48, 0x29, 0x44, 0xc2, 0x38,
	0xcf, 0x22, 0xcc, 0xc1, 0x37, 0x3d, 0x81, 0xed, 0x6a, 0x7e, 0xb3, 0x2a, 0xe0, 0xd8, 0x06, 0x82,
	0x7f, 0x87, 0xf4, 0x12, 0x36, 0x87, 0x1e, 0x6c, 0x1c, 0x93, 0x64, 0xeb, 0x34, 0x4e, 0xd7, 0xb7,
	0x4e, 0xef, 0x7a, 0x5e, 0xbe, 0x52, 0x50, 0x06, 0x13, 0x61, 0x55, 0xb7, 0x0e, 0x9b, 0xc4, 0x24,
	0x99, 0xe6, 0xc3, 0xf7, 0xea, 0xe2, 0xa3, 0xe1, 0x64, 0xd9, 0x70, 0xf2, 0xd5, 0x70, 0xf2, 0xde,
	0xf2, 0x60, 0xd9, 0xf2, 0xe0, 0xb3, 0xe5, 0xc1, 0x3d, 0xff, 0x67, 0x9f, 0xbd, 0x66, 0x78, 0x50,
	0xbf, 0xa8, 0x95, 0x9b, 0x8f, 0xf1, 0x9c, 0x67, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x08,
	0x2f, 0x74, 0x9c, 0x01, 0x00, 0x00,
}

func (m *SelectionCriteria) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectionCriteria) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectionCriteria) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSelectionCriteria(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Validity != nil {
		{
			size, err := m.Validity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSelectionCriteria(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.NbDelegations != 0 {
		i = encodeVarintSelectionCriteria(dAtA, i, uint64(m.NbDelegations))
		i--
		dAtA[i] = 0x28
	}
	if m.Cost != 0 {
		i = encodeVarintSelectionCriteria(dAtA, i, uint64(m.Cost))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DelegatorLocationList) > 0 {
		for iNdEx := len(m.DelegatorLocationList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DelegatorLocationList[iNdEx])
			copy(dAtA[i:], m.DelegatorLocationList[iNdEx])
			i = encodeVarintSelectionCriteria(dAtA, i, uint64(len(m.DelegatorLocationList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DomainList) > 0 {
		for iNdEx := len(m.DomainList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DomainList[iNdEx])
			copy(dAtA[i:], m.DomainList[iNdEx])
			i = encodeVarintSelectionCriteria(dAtA, i, uint64(len(m.DomainList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintSelectionCriteria(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSelectionCriteria(dAtA []byte, offset int, v uint64) int {
	offset -= sovSelectionCriteria(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SelectionCriteria) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSelectionCriteria(uint64(m.Id))
	}
	if len(m.DomainList) > 0 {
		for _, s := range m.DomainList {
			l = len(s)
			n += 1 + l + sovSelectionCriteria(uint64(l))
		}
	}
	if len(m.DelegatorLocationList) > 0 {
		for _, s := range m.DelegatorLocationList {
			l = len(s)
			n += 1 + l + sovSelectionCriteria(uint64(l))
		}
	}
	if m.Cost != 0 {
		n += 1 + sovSelectionCriteria(uint64(m.Cost))
	}
	if m.NbDelegations != 0 {
		n += 1 + sovSelectionCriteria(uint64(m.NbDelegations))
	}
	if m.Validity != nil {
		l = m.Validity.Size()
		n += 1 + l + sovSelectionCriteria(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSelectionCriteria(uint64(l))
	}
	return n
}

func sovSelectionCriteria(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSelectionCriteria(x uint64) (n int) {
	return sovSelectionCriteria(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SelectionCriteria) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelectionCriteria
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectionCriteria: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectionCriteria: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelectionCriteria
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelectionCriteria
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelectionCriteria
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSelectionCriteria
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainList = append(m.DomainList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorLocationList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelectionCriteria
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelectionCriteria
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSelectionCriteria
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorLocationList = append(m.DelegatorLocationList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelectionCriteria
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbDelegations", wireType)
			}
			m.NbDelegations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelectionCriteria
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NbDelegations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelectionCriteria
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelectionCriteria
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelectionCriteria
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validity == nil {
				m.Validity = &Validity{}
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelectionCriteria
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelectionCriteria
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSelectionCriteria
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelectionCriteria(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelectionCriteria
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSelectionCriteria(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSelectionCriteria
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSelectionCriteria
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSelectionCriteria
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSelectionCriteria
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSelectionCriteria
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSelectionCriteria
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSelectionCriteria        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSelectionCriteria          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSelectionCriteria = fmt.Errorf("proto: unexpected end of group")
)
