// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fdpd/delegation_decision.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegationDecision struct {
	Id                     uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Decision               string                `protobuf:"bytes,2,opt,name=decision,proto3" json:"decision,omitempty"`
	DelegationConditions   *DelegationConditions `protobuf:"bytes,3,opt,name=delegationConditions,proto3" json:"delegationConditions,omitempty"`
	Creator                string                `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	DecisionDomain         string                `protobuf:"bytes,5,opt,name=decisionDomain,proto3" json:"decisionDomain,omitempty"`
	DelegationRequestLabel string                `protobuf:"bytes,6,opt,name=delegationRequestLabel,proto3" json:"delegationRequestLabel,omitempty"`
}

func (m *DelegationDecision) Reset()         { *m = DelegationDecision{} }
func (m *DelegationDecision) String() string { return proto.CompactTextString(m) }
func (*DelegationDecision) ProtoMessage()    {}
func (*DelegationDecision) Descriptor() ([]byte, []int) {
	return fileDescriptor_068a1c7dc694fb82, []int{0}
}
func (m *DelegationDecision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationDecision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationDecision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationDecision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationDecision.Merge(m, src)
}
func (m *DelegationDecision) XXX_Size() int {
	return m.Size()
}
func (m *DelegationDecision) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationDecision.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationDecision proto.InternalMessageInfo

func (m *DelegationDecision) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelegationDecision) GetDecision() string {
	if m != nil {
		return m.Decision
	}
	return ""
}

func (m *DelegationDecision) GetDelegationConditions() *DelegationConditions {
	if m != nil {
		return m.DelegationConditions
	}
	return nil
}

func (m *DelegationDecision) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *DelegationDecision) GetDecisionDomain() string {
	if m != nil {
		return m.DecisionDomain
	}
	return ""
}

func (m *DelegationDecision) GetDelegationRequestLabel() string {
	if m != nil {
		return m.DelegationRequestLabel
	}
	return ""
}

func init() {
	proto.RegisterType((*DelegationDecision)(nil), "delegationcontrol.fdpd.DelegationDecision")
}

func init() { proto.RegisterFile("fdpd/delegation_decision.proto", fileDescriptor_068a1c7dc694fb82) }

var fileDescriptor_068a1c7dc694fb82 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0x4b, 0x29, 0x48,
	0xd1, 0x4f, 0x49, 0xcd, 0x49, 0x4d, 0x4f, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0x4f, 0x49, 0x4d, 0xce,
	0x2c, 0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x43, 0x48, 0x25, 0xe7,
	0xe7, 0x95, 0x14, 0xe5, 0xe7, 0xe8, 0x81, 0x74, 0x48, 0x29, 0xa0, 0xeb, 0x4b, 0xce, 0xcf, 0x4b,
	0xc9, 0x04, 0xb1, 0x8a, 0x21, 0x3a, 0x95, 0xe6, 0x30, 0x71, 0x09, 0xb9, 0xc0, 0xe5, 0x5d, 0xa0,
	0xc6, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x31, 0x65,
	0xa6, 0x08, 0x49, 0x71, 0x71, 0xc0, 0xac, 0x94, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3,
	0x85, 0x12, 0xb8, 0x44, 0x10, 0x36, 0x38, 0xc3, 0x2d, 0x90, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x36,
	0xd2, 0xd1, 0xc3, 0xee, 0x36, 0x3d, 0x17, 0x2c, 0x7a, 0x82, 0xb0, 0x9a, 0x24, 0x24, 0xc1, 0xc5,
	0x9e, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x5f, 0x24, 0xc1, 0x02, 0xb6, 0x1c, 0xc6, 0x15, 0x52, 0xe3,
	0xe2, 0x83, 0xb9, 0xc3, 0x25, 0x3f, 0x37, 0x31, 0x33, 0x4f, 0x82, 0x15, 0xac, 0x00, 0x4d, 0x54,
	0xc8, 0x8c, 0x0b, 0x29, 0x88, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x7c, 0x12, 0x93, 0x52,
	0x73, 0x24, 0xd8, 0xc0, 0xea, 0x71, 0xc8, 0x3a, 0x59, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91,
	0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3,
	0xb1, 0x1c, 0x43, 0x94, 0x1c, 0x86, 0xb7, 0xf4, 0x2b, 0xf4, 0xc1, 0xc1, 0x5d, 0x52, 0x59, 0x90,
	0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x5f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x09, 0x05,
	0x4f, 0xbb, 0x01, 0x00, 0x00,
}

func (m *DelegationDecision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationDecision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationDecision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationRequestLabel) > 0 {
		i -= len(m.DelegationRequestLabel)
		copy(dAtA[i:], m.DelegationRequestLabel)
		i = encodeVarintDelegationDecision(dAtA, i, uint64(len(m.DelegationRequestLabel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DecisionDomain) > 0 {
		i -= len(m.DecisionDomain)
		copy(dAtA[i:], m.DecisionDomain)
		i = encodeVarintDelegationDecision(dAtA, i, uint64(len(m.DecisionDomain)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDelegationDecision(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.DelegationConditions != nil {
		{
			size, err := m.DelegationConditions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDelegationDecision(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Decision) > 0 {
		i -= len(m.Decision)
		copy(dAtA[i:], m.Decision)
		i = encodeVarintDelegationDecision(dAtA, i, uint64(len(m.Decision)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDelegationDecision(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegationDecision(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegationDecision(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationDecision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDelegationDecision(uint64(m.Id))
	}
	l = len(m.Decision)
	if l > 0 {
		n += 1 + l + sovDelegationDecision(uint64(l))
	}
	if m.DelegationConditions != nil {
		l = m.DelegationConditions.Size()
		n += 1 + l + sovDelegationDecision(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDelegationDecision(uint64(l))
	}
	l = len(m.DecisionDomain)
	if l > 0 {
		n += 1 + l + sovDelegationDecision(uint64(l))
	}
	l = len(m.DelegationRequestLabel)
	if l > 0 {
		n += 1 + l + sovDelegationDecision(uint64(l))
	}
	return n
}

func sovDelegationDecision(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegationDecision(x uint64) (n int) {
	return sovDelegationDecision(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegationDecision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegationDecision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationDecision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationDecision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationConditions == nil {
				m.DelegationConditions = &DelegationConditions{}
			}
			if err := m.DelegationConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecisionDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRequestLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationDecision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationRequestLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegationDecision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegationDecision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegationDecision(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegationDecision
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegationDecision
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegationDecision
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegationDecision
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegationDecision
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegationDecision
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegationDecision        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegationDecision          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegationDecision = fmt.Errorf("proto: unexpected end of group")
)
