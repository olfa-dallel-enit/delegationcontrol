// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fdpd/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the fdpd module's genesis state.
type GenesisState struct {
	Params                       Params                    `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	PortId                       string                    `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	LocalDomain                  *LocalDomain              `protobuf:"bytes,3,opt,name=localDomain,proto3" json:"localDomain,omitempty"`
	DomainList                   []Domain                  `protobuf:"bytes,4,rep,name=domainList,proto3" json:"domainList"`
	DomainCount                  uint64                    `protobuf:"varint,5,opt,name=domainCount,proto3" json:"domainCount,omitempty"`
	ForwardPolicy                *ForwardPolicy            `protobuf:"bytes,6,opt,name=forwardPolicy,proto3" json:"forwardPolicy,omitempty"`
	ValidityList                 []Validity                `protobuf:"bytes,7,rep,name=validityList,proto3" json:"validityList"`
	ValidityCount                uint64                    `protobuf:"varint,8,opt,name=validityCount,proto3" json:"validityCount,omitempty"`
	DecisionPolicy               *DecisionPolicy           `protobuf:"bytes,9,opt,name=decisionPolicy,proto3" json:"decisionPolicy,omitempty"`
	PermissionList               []Permission              `protobuf:"bytes,10,rep,name=permissionList,proto3" json:"permissionList"`
	PermissionCount              uint64                    `protobuf:"varint,11,opt,name=permissionCount,proto3" json:"permissionCount,omitempty"`
	DelegationConditionsList     []DelegationConditions    `protobuf:"bytes,12,rep,name=delegationConditionsList,proto3" json:"delegationConditionsList"`
	DelegationConditionsCount    uint64                    `protobuf:"varint,13,opt,name=delegationConditionsCount,proto3" json:"delegationConditionsCount,omitempty"`
	DelegationDecisionList       []DelegationDecision      `protobuf:"bytes,14,rep,name=delegationDecisionList,proto3" json:"delegationDecisionList"`
	DelegationDecisionCount      uint64                    `protobuf:"varint,15,opt,name=delegationDecisionCount,proto3" json:"delegationDecisionCount,omitempty"`
	SelectionPolicy              *SelectionPolicy          `protobuf:"bytes,16,opt,name=selectionPolicy,proto3" json:"selectionPolicy,omitempty"`
	SelectionCriteriaList        []SelectionCriteria       `protobuf:"bytes,17,rep,name=selectionCriteriaList,proto3" json:"selectionCriteriaList"`
	SelectionCriteriaCount       uint64                    `protobuf:"varint,18,opt,name=selectionCriteriaCount,proto3" json:"selectionCriteriaCount,omitempty"`
	DelegationRequestList        []DelegationRequest       `protobuf:"bytes,19,rep,name=delegationRequestList,proto3" json:"delegationRequestList"`
	DelegationRequestCount       uint64                    `protobuf:"varint,20,opt,name=delegationRequestCount,proto3" json:"delegationRequestCount,omitempty"`
	FinalDelegationDecisionList  []FinalDelegationDecision `protobuf:"bytes,21,rep,name=finalDelegationDecisionList,proto3" json:"finalDelegationDecisionList"`
	FinalDelegationDecisionCount uint64                    `protobuf:"varint,22,opt,name=finalDelegationDecisionCount,proto3" json:"finalDelegationDecisionCount,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_009418220533af18, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *GenesisState) GetLocalDomain() *LocalDomain {
	if m != nil {
		return m.LocalDomain
	}
	return nil
}

func (m *GenesisState) GetDomainList() []Domain {
	if m != nil {
		return m.DomainList
	}
	return nil
}

func (m *GenesisState) GetDomainCount() uint64 {
	if m != nil {
		return m.DomainCount
	}
	return 0
}

func (m *GenesisState) GetForwardPolicy() *ForwardPolicy {
	if m != nil {
		return m.ForwardPolicy
	}
	return nil
}

func (m *GenesisState) GetValidityList() []Validity {
	if m != nil {
		return m.ValidityList
	}
	return nil
}

func (m *GenesisState) GetValidityCount() uint64 {
	if m != nil {
		return m.ValidityCount
	}
	return 0
}

func (m *GenesisState) GetDecisionPolicy() *DecisionPolicy {
	if m != nil {
		return m.DecisionPolicy
	}
	return nil
}

func (m *GenesisState) GetPermissionList() []Permission {
	if m != nil {
		return m.PermissionList
	}
	return nil
}

func (m *GenesisState) GetPermissionCount() uint64 {
	if m != nil {
		return m.PermissionCount
	}
	return 0
}

func (m *GenesisState) GetDelegationConditionsList() []DelegationConditions {
	if m != nil {
		return m.DelegationConditionsList
	}
	return nil
}

func (m *GenesisState) GetDelegationConditionsCount() uint64 {
	if m != nil {
		return m.DelegationConditionsCount
	}
	return 0
}

func (m *GenesisState) GetDelegationDecisionList() []DelegationDecision {
	if m != nil {
		return m.DelegationDecisionList
	}
	return nil
}

func (m *GenesisState) GetDelegationDecisionCount() uint64 {
	if m != nil {
		return m.DelegationDecisionCount
	}
	return 0
}

func (m *GenesisState) GetSelectionPolicy() *SelectionPolicy {
	if m != nil {
		return m.SelectionPolicy
	}
	return nil
}

func (m *GenesisState) GetSelectionCriteriaList() []SelectionCriteria {
	if m != nil {
		return m.SelectionCriteriaList
	}
	return nil
}

func (m *GenesisState) GetSelectionCriteriaCount() uint64 {
	if m != nil {
		return m.SelectionCriteriaCount
	}
	return 0
}

func (m *GenesisState) GetDelegationRequestList() []DelegationRequest {
	if m != nil {
		return m.DelegationRequestList
	}
	return nil
}

func (m *GenesisState) GetDelegationRequestCount() uint64 {
	if m != nil {
		return m.DelegationRequestCount
	}
	return 0
}

func (m *GenesisState) GetFinalDelegationDecisionList() []FinalDelegationDecision {
	if m != nil {
		return m.FinalDelegationDecisionList
	}
	return nil
}

func (m *GenesisState) GetFinalDelegationDecisionCount() uint64 {
	if m != nil {
		return m.FinalDelegationDecisionCount
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "delegationcontrol.fdpd.GenesisState")
}

func init() { proto.RegisterFile("fdpd/genesis.proto", fileDescriptor_009418220533af18) }

var fileDescriptor_009418220533af18 = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x63, 0x5a, 0x52, 0x7a, 0x93, 0xb6, 0x74, 0xfa, 0xe7, 0xa6, 0x60, 0xac, 0x52, 0x20,
	0x20, 0x94, 0x48, 0x20, 0xa1, 0x2e, 0xba, 0x6a, 0x03, 0x08, 0xa8, 0x50, 0x71, 0x25, 0x16, 0x6c,
	0x22, 0x63, 0x4f, 0xc3, 0x48, 0xae, 0x27, 0xd8, 0x53, 0x4a, 0xdf, 0x82, 0x37, 0x62, 0xdb, 0x65,
	0x97, 0xac, 0x10, 0x6a, 0x5e, 0x04, 0xf9, 0xce, 0x38, 0xf1, 0xdf, 0xa4, 0xbb, 0xf8, 0x9e, 0x7b,
	0x8e, 0xbf, 0x3b, 0x33, 0x19, 0x03, 0x39, 0xf1, 0x87, 0x7e, 0x77, 0x40, 0x43, 0x1a, 0xb3, 0xb8,
	0x33, 0x8c, 0xb8, 0xe0, 0x64, 0xdd, 0xa7, 0x01, 0x1d, 0xb8, 0x82, 0xf1, 0xd0, 0xe3, 0xa1, 0x88,
	0x78, 0xd0, 0x49, 0xba, 0x5a, 0xab, 0x03, 0x3e, 0xe0, 0xd8, 0xd2, 0x4d, 0x7e, 0xc9, 0xee, 0xd6,
	0x32, 0x26, 0x0c, 0xdd, 0xc8, 0x3d, 0x55, 0x01, 0xad, 0x0d, 0x2c, 0x05, 0xdc, 0x73, 0x83, 0xbe,
	0xcf, 0x4f, 0x5d, 0x16, 0xe6, 0x7a, 0x73, 0xa5, 0x4d, 0x2c, 0x9d, 0xf0, 0xe8, 0xdc, 0x8d, 0xfc,
	0xfe, 0x90, 0x07, 0xcc, 0xbb, 0x50, 0xd2, 0x0a, 0x4a, 0x3f, 0xdc, 0x80, 0xf9, 0x4c, 0xa4, 0xc5,
	0x96, 0x8c, 0xa0, 0x1e, 0x8b, 0x19, 0x0f, 0xf3, 0x86, 0x35, 0x89, 0x42, 0xa3, 0x53, 0x16, 0x27,
	0xaa, 0x2a, 0xdb, 0xca, 0x92, 0x0e, 0xd5, 0xf7, 0x78, 0xe8, 0xb3, 0xe4, 0x57, 0x0a, 0x6c, 0x15,
	0x3b, 0xd2, 0x7c, 0xa5, 0x6f, 0xa1, 0x1e, 0xd3, 0x80, 0x7a, 0xa2, 0xf4, 0xd6, 0xfb, 0x05, 0xd1,
	0x8b, 0x98, 0xa0, 0x11, 0x73, 0x73, 0x72, 0x26, 0x3b, 0xa2, 0xdf, 0xcf, 0x68, 0x2c, 0x94, 0xbc,
	0x23, 0xe7, 0x67, 0x61, 0xb2, 0x56, 0x3a, 0x80, 0xed, 0xdf, 0x4d, 0x68, 0xbe, 0x95, 0x9b, 0x74,
	0x2c, 0x5c, 0x41, 0xc9, 0x1e, 0xd4, 0xe5, 0x92, 0x9b, 0x86, 0x6d, 0xb4, 0x1b, 0x2f, 0xac, 0x4e,
	0xf5, 0xa6, 0x75, 0x8e, 0xb0, 0x6b, 0x7f, 0xf6, 0xf2, 0xef, 0x83, 0x9a, 0xa3, 0x3c, 0x64, 0x03,
	0xe6, 0x86, 0x3c, 0x12, 0x7d, 0xe6, 0x9b, 0xb7, 0x6c, 0xa3, 0x3d, 0xef, 0xd4, 0x93, 0xc7, 0x77,
	0x3e, 0x79, 0x0d, 0x0d, 0xdc, 0xb6, 0x1e, 0x6e, 0x91, 0x39, 0x83, 0xd9, 0x0f, 0x75, 0xd9, 0x87,
	0x93, 0x56, 0x27, 0xeb, 0x23, 0x3d, 0x00, 0xb9, 0xc9, 0x87, 0x2c, 0x16, 0xe6, 0xac, 0x3d, 0x33,
	0x8d, 0x50, 0x7a, 0x14, 0x61, 0xc6, 0x47, 0x6c, 0x68, 0xc8, 0xa7, 0x03, 0x7e, 0x16, 0x0a, 0xf3,
	0xb6, 0x6d, 0xb4, 0x67, 0x9d, 0x6c, 0x89, 0x7c, 0x80, 0x05, 0x75, 0x72, 0x8e, 0x70, 0x47, 0xcc,
	0x3a, 0x02, 0x3f, 0xd2, 0xbd, 0xea, 0x4d, 0xb6, 0xd9, 0xc9, 0x7b, 0xc9, 0x7b, 0x68, 0xa6, 0x67,
	0x0d, 0xb1, 0xe7, 0x10, 0xdb, 0xd6, 0x65, 0x7d, 0x56, 0xbd, 0x0a, 0x3c, 0xe7, 0x25, 0x3b, 0xb0,
	0x90, 0x3e, 0x4b, 0xf8, 0x3b, 0x08, 0x9f, 0x2f, 0x92, 0x8f, 0xb0, 0x98, 0xee, 0xb3, 0xe2, 0x9f,
	0x47, 0xfe, 0xc7, 0xda, 0xa5, 0xca, 0x75, 0x3b, 0x05, 0x37, 0x39, 0x82, 0xc5, 0xc9, 0xe1, 0xc7,
	0x19, 0x00, 0x67, 0xd8, 0xd6, 0x1e, 0x8e, 0x71, 0xb7, 0x9a, 0xa2, 0xe0, 0x27, 0x6d, 0x58, 0x9a,
	0x54, 0xe4, 0x24, 0x0d, 0x9c, 0xa4, 0x58, 0x26, 0x21, 0x98, 0x93, 0x97, 0x1c, 0x8c, 0xff, 0x60,
	0x48, 0xd1, 0x44, 0x8a, 0xe7, 0xfa, 0xa9, 0xca, 0x3e, 0xc5, 0xa3, 0xcd, 0x24, 0x7b, 0xb0, 0x59,
	0xa5, 0x49, 0xc6, 0x05, 0x64, 0xd4, 0x37, 0x90, 0x6f, 0x90, 0xb9, 0xe4, 0xd2, 0x55, 0x45, 0xd6,
	0x45, 0x64, 0x7d, 0x76, 0x33, 0x6b, 0xea, 0x52, 0xa4, 0x9a, 0x3c, 0xb2, 0x0b, 0x1b, 0x65, 0x45,
	0x52, 0x2e, 0x21, 0xa5, 0x4e, 0x26, 0x9f, 0x60, 0x69, 0x7c, 0xa9, 0xa8, 0xe3, 0x71, 0x17, 0x8f,
	0xc7, 0x13, 0x1d, 0xdc, 0x71, 0xbe, 0xdd, 0x29, 0xfa, 0x09, 0x85, 0xb5, 0x71, 0xe9, 0x40, 0x5d,
	0x53, 0x38, 0xf5, 0x32, 0x4e, 0xfd, 0xf4, 0xc6, 0xe0, 0xd4, 0xa4, 0x86, 0xae, 0x4e, 0x23, 0xaf,
	0x60, 0xbd, 0x24, 0xc8, 0x91, 0x09, 0x8e, 0xac, 0x51, 0x13, 0xbc, 0x09, 0x80, 0x23, 0xaf, 0x49,
	0xc4, 0x5b, 0x99, 0x8e, 0xd7, 0x2b, 0x9a, 0x52, 0xbc, 0xca, 0xb4, 0x04, 0xaf, 0x24, 0x48, 0xbc,
	0x55, 0x89, 0x57, 0xad, 0x92, 0x73, 0xd8, 0xc2, 0x7b, 0xba, 0x57, 0x7d, 0x72, 0xd6, 0x10, 0xb2,
	0xab, 0xbd, 0x7b, 0xaa, 0xad, 0x0a, 0x75, 0x5a, 0x32, 0xd9, 0x87, 0x7b, 0x1a, 0x59, 0x62, 0xaf,
	0x23, 0xf6, 0xd4, 0x9e, 0xfd, 0xdd, 0xcb, 0x6b, 0xcb, 0xb8, 0xba, 0xb6, 0x8c, 0x7f, 0xd7, 0x96,
	0xf1, 0x6b, 0x64, 0xd5, 0xae, 0x46, 0x56, 0xed, 0xcf, 0xc8, 0xaa, 0x7d, 0xb1, 0x4a, 0xc0, 0xdd,
	0x9f, 0x5d, 0xfc, 0x2a, 0x89, 0x8b, 0x21, 0x8d, 0xbf, 0xd6, 0xf1, 0x13, 0xf4, 0xf2, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0x0e, 0x09, 0x8b, 0x2b, 0x08, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalDelegationDecisionCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.FinalDelegationDecisionCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.FinalDelegationDecisionList) > 0 {
		for iNdEx := len(m.FinalDelegationDecisionList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalDelegationDecisionList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.DelegationRequestCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegationRequestCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.DelegationRequestList) > 0 {
		for iNdEx := len(m.DelegationRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.SelectionCriteriaCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SelectionCriteriaCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.SelectionCriteriaList) > 0 {
		for iNdEx := len(m.SelectionCriteriaList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelectionCriteriaList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.SelectionPolicy != nil {
		{
			size, err := m.SelectionPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.DelegationDecisionCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegationDecisionCount))
		i--
		dAtA[i] = 0x78
	}
	if len(m.DelegationDecisionList) > 0 {
		for iNdEx := len(m.DelegationDecisionList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationDecisionList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.DelegationConditionsCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegationConditionsCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.DelegationConditionsList) > 0 {
		for iNdEx := len(m.DelegationConditionsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationConditionsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.PermissionCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PermissionCount))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PermissionList) > 0 {
		for iNdEx := len(m.PermissionList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PermissionList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.DecisionPolicy != nil {
		{
			size, err := m.DecisionPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ValidityCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValidityCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ValidityList) > 0 {
		for iNdEx := len(m.ValidityList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidityList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ForwardPolicy != nil {
		{
			size, err := m.ForwardPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DomainCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DomainCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DomainList) > 0 {
		for iNdEx := len(m.DomainList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DomainList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LocalDomain != nil {
		{
			size, err := m.LocalDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.LocalDomain != nil {
		l = m.LocalDomain.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.DomainList) > 0 {
		for _, e := range m.DomainList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.DomainCount != 0 {
		n += 1 + sovGenesis(uint64(m.DomainCount))
	}
	if m.ForwardPolicy != nil {
		l = m.ForwardPolicy.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.ValidityList) > 0 {
		for _, e := range m.ValidityList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.ValidityCount != 0 {
		n += 1 + sovGenesis(uint64(m.ValidityCount))
	}
	if m.DecisionPolicy != nil {
		l = m.DecisionPolicy.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.PermissionList) > 0 {
		for _, e := range m.PermissionList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.PermissionCount != 0 {
		n += 1 + sovGenesis(uint64(m.PermissionCount))
	}
	if len(m.DelegationConditionsList) > 0 {
		for _, e := range m.DelegationConditionsList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.DelegationConditionsCount != 0 {
		n += 1 + sovGenesis(uint64(m.DelegationConditionsCount))
	}
	if len(m.DelegationDecisionList) > 0 {
		for _, e := range m.DelegationDecisionList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.DelegationDecisionCount != 0 {
		n += 1 + sovGenesis(uint64(m.DelegationDecisionCount))
	}
	if m.SelectionPolicy != nil {
		l = m.SelectionPolicy.Size()
		n += 2 + l + sovGenesis(uint64(l))
	}
	if len(m.SelectionCriteriaList) > 0 {
		for _, e := range m.SelectionCriteriaList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.SelectionCriteriaCount != 0 {
		n += 2 + sovGenesis(uint64(m.SelectionCriteriaCount))
	}
	if len(m.DelegationRequestList) > 0 {
		for _, e := range m.DelegationRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.DelegationRequestCount != 0 {
		n += 2 + sovGenesis(uint64(m.DelegationRequestCount))
	}
	if len(m.FinalDelegationDecisionList) > 0 {
		for _, e := range m.FinalDelegationDecisionList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.FinalDelegationDecisionCount != 0 {
		n += 2 + sovGenesis(uint64(m.FinalDelegationDecisionCount))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalDomain == nil {
				m.LocalDomain = &LocalDomain{}
			}
			if err := m.LocalDomain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainList = append(m.DomainList, Domain{})
			if err := m.DomainList[len(m.DomainList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCount", wireType)
			}
			m.DomainCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardPolicy == nil {
				m.ForwardPolicy = &ForwardPolicy{}
			}
			if err := m.ForwardPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidityList = append(m.ValidityList, Validity{})
			if err := m.ValidityList[len(m.ValidityList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityCount", wireType)
			}
			m.ValidityCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidityCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecisionPolicy == nil {
				m.DecisionPolicy = &DecisionPolicy{}
			}
			if err := m.DecisionPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionList = append(m.PermissionList, Permission{})
			if err := m.PermissionList[len(m.PermissionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionCount", wireType)
			}
			m.PermissionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationConditionsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationConditionsList = append(m.DelegationConditionsList, DelegationConditions{})
			if err := m.DelegationConditionsList[len(m.DelegationConditionsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationConditionsCount", wireType)
			}
			m.DelegationConditionsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationConditionsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationDecisionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationDecisionList = append(m.DelegationDecisionList, DelegationDecision{})
			if err := m.DelegationDecisionList[len(m.DelegationDecisionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationDecisionCount", wireType)
			}
			m.DelegationDecisionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationDecisionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelectionPolicy == nil {
				m.SelectionPolicy = &SelectionPolicy{}
			}
			if err := m.SelectionPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionCriteriaList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectionCriteriaList = append(m.SelectionCriteriaList, SelectionCriteria{})
			if err := m.SelectionCriteriaList[len(m.SelectionCriteriaList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionCriteriaCount", wireType)
			}
			m.SelectionCriteriaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectionCriteriaCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationRequestList = append(m.DelegationRequestList, DelegationRequest{})
			if err := m.DelegationRequestList[len(m.DelegationRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRequestCount", wireType)
			}
			m.DelegationRequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationRequestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalDelegationDecisionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalDelegationDecisionList = append(m.FinalDelegationDecisionList, FinalDelegationDecision{})
			if err := m.FinalDelegationDecisionList[len(m.FinalDelegationDecisionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalDelegationDecisionCount", wireType)
			}
			m.FinalDelegationDecisionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalDelegationDecisionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
